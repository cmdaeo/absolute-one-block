==================== PROJECT DIRECTORY STRUCTURE ====================

    .gitignore
    build.gradle
    gradlew
    gradlew.bat
    pack.py
    settings.gradle
    gradle/
        wrapper/
            gradle-wrapper.jar
            gradle-wrapper.properties
    src/
        main/
            java/
                com/
                    zwcess/
                        absoluteoneblock/
                            AbsoluteOneBlock.java
                            block/
                                OneBlock.java
                            client/
                                ClientOneBlockData.java
                                OneBlockHudOverlay.java
                                PlatformBuilderToolScreen.java
                            command/
                                AbsoluteCommands.java
                            config/
                                Config.java
                                ModConfig.java
                            core/
                                ModCreativeTabs.java
                                Registration.java
                            dimension/
                                AbsoluteDimensions.java
                                OneBlockChunkGenerator.java
                            event/
                                BlockBreakEventHandler.java
                                ClientForgeEvents.java
                                ClientModEvents.java
                                HeartOfTheVoidHandler.java
                                ItemCapabilityEventHandler.java
                                PlayerEventHandler.java
                            game/
                                ChestData.java
                                EndOfPhaseRewards.java
                                GameModeManager.java
                                IslandManager.java
                                NextSpawn.java
                                Phase.java
                                PhaseConfig.java
                                PhaseManager.java
                                PlayerPhaseData.java
                                ProgressManager.java
                                WorldProgressData.java
                            item/
                                HeartOfTheVoidItem.java
                                PlatformBuilderToolItem.java
                            loot/
                                AddItemModifier.java
                            menu/
                                PlatformBuilderToolMenu.java
                            network/
                                C2SUpdatePlatformSizePacket.java
                                PacketHandler.java
                                SyncProgressS2CPacket.java
                            util/
                                AdvancementHelper.java
            resources/
                pack.mcmeta
                assets/
                    absoluteoneblock/
                        blockstates/
                            one_block.json
                        lang/
                            en_us.json
                            pt_pt.json
                        models/
                            block/
                                one_block.json
                            item/
                                heart_of_the_void.json
                                one_block.json
                                platform_builder_tool.json
                        textures/
                            block/
                                one_block.png
                            item/
                                heart_of_the_void.png
                                platform_builder_tool.png
                data/
                    absoluteoneblock/
                        phases.json
                        advancements/
                            root.json
                            challenges/
                                first_block.json
                                hundred_blocks.json
                                no_death.json
                                speed_run.json
                                survived_void.json
                                ten_thousand_blocks.json
                                thousand_blocks.json
                            collection/
                                all_logs.json
                                all_ores.json
                                heart_of_the_void.json
                                platform_tool.json
                            phases/
                                enter_end.json
                                enter_exploration.json
                                enter_mastery.json
                                enter_mining.json
                                enter_nether.json
                                enter_surface.json
                                infinity.json
                        dimension/
                            oneblock_dimension.json
                        dimension_type/
                            oneblock_dimension_type.json
                        loot_modifiers/
                            heart_of_the_void_from_chests.json
                        loot_tables/
                            chests/
                                infinity_heart.json
                                mastery_treasure.json
                                starting_treasure.json
                            rewards/
                                end_completion.json
                                mastery_gear.json
                                mining_gear.json
                        recipes/
                            platform_builder_tool.json
                        tags/
                            blocks/
                                one_block.json
                    forge/
                        loot_modifiers/
                            global_loot_modifiers.json
                META-INF/
                    mods.toml
        test/
            java/
            resources/


==================== FILE CONTENTS ====================

=============== FILE: .gitignore ===============

# === Gradle ===
# Ignore the .gradle directory, which stores cache and build information.
.gradle/

# Ignore all build directories generated by Gradle.
build/

# Do NOT ignore the Gradle Wrapper jar file, as it's needed for a consistent build environment.
# !gradle/wrapper/gradle-wrapper.jar manually added so yea


# === IDE and Editor Specific ===
# Ignore Visual Studio Code settings and workspace files.
.vscode/

# Ignore IntelliJ IDEA project files.
.idea/
*.iml
*.ipr
*.iws

# Ignore Eclipse project files.
.project
.classpath
.settings/


# === Build Outputs & Temporary Files ===
# Ignore general build output directories.
/bin/
/out/

# Ignore the 'run' directory, which is used for testing the mod locally.
/run/

# Ignore generated Java class files.
*.class

# Ignore the final JAR files. These should be distributed via releases, not in the main branch.
*.jar

# Ignore log files.
*.log
logs/

# Ignore temporary files created by various tools.
/tmp/
*.tmp


# === Operating System Files ===
# Ignore macOS specific files.
.DS_Store

# Ignore Windows specific thumbnail cache.
Thumbs.db


# === User-specific Files ===
# Ignore user-specific JVM arguments.
user_jvm_args.txt
pack.py


=============== FILE: build.gradle ===============

plugins {
    id 'net.minecraftforge.gradle' version '6.0.+'
}

group = 'com.zwcess.absolute_one_block'
version = '1.0.0'
archivesBaseName = 'absoluteoneblock'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'official', version: '1.20.1'
    runs {
        client {
            workingDirectory project.file('run')
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.4.0'
}

/*sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
}*/

// --- THIS IS THE CORRECTED COPY TASK ---

// Define a new task that will handle copying the file
task copyJarToMods {
    // This ensures that the 'jar' task runs first, so we have a file to copy
    dependsOn jar
    
    // The 'doLast' block contains code that will run at the end of the task's execution
    doLast {
        // Define a list of all the folders you want to copy the mod to
        def destinationFolders = [
            'C:/Users/Lenovo/OneDrive - Universidade de Aveiro/Desktop/forgeServer/mods',
            'C:/Users/Lenovo/AppData/Roaming/.minecraft/mods'
        ]

        // Loop through each destination folder
        destinationFolders.each { dest ->
            // Perform a copy action for each destination
            copy {
                from jar.archiveFile
                into dest
                println ">> Copied ${jar.archiveFile.get().asFile.name} to ${dest}"
            }
        }
    }
}

// This tells Gradle to run our 'copyJarToMods' task automatically after the 'build' task finishes
build.finalizedBy copyJarToMods


=============== FILE: gradlew ===============

#!/bin/sh

#
# Copyright Â© 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions Â«$varÂ», Â«${var}Â», Â«${var:-default}Â», Â«${var+SET}Â»,
#           Â«${var#prefix}Â», Â«${var%suffix}Â», and Â«$( cmd )Â»;
#         * compound commands having a testable exit status, especially Â«caseÂ»;
#         * various built-in commands including Â«commandÂ», Â«setÂ», and Â«ulimitÂ».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/HEAD/platforms/jvm/plugins-application/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

# This is normally unused
# shellcheck disable=SC2034
APP_BASE_NAME=${0##*/}
# Discard cd standard output in case $CDPATH is set (https://github.com/gradle/gradle/issues/25036)
APP_HOME=$( cd -P "${APP_HOME:-./}" > /dev/null && printf '%s\n' "$PWD" ) || exit

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH="\\\"\\\""


# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    if ! command -v java >/dev/null 2>&1
    then
        die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        # In POSIX sh, ulimit -H is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        # In POSIX sh, ulimit -n is undefined. That's why the result is checked to see if it worked.
        # shellcheck disable=SC2039,SC3045
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi


# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Collect all arguments for the java command:
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and optsEnvironmentVar are not allowed to contain shell fragments,
#     and any embedded shellness will be escaped.
#   * For example: A user cannot expect ${Hostname} to be expanded, as it is an environment variable and will be
#     treated as '${Hostname}' itself on the command line.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        -jar "$APP_HOME/gradle/wrapper/gradle-wrapper.jar" \
        "$@"

# Stop when "xargs" is not available.
if ! command -v xargs >/dev/null 2>&1
then
    die "xargs is not available"
fi

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"


=============== FILE: gradlew.bat ===============

@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem
@rem SPDX-License-Identifier: Apache-2.0
@rem

@if "%DEBUG%"=="" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%"=="" set DIRNAME=.
@rem This is normally unused
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if %ERRORLEVEL% equ 0 goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH. 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo. 1>&2
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME% 1>&2
echo. 1>&2
echo Please set the JAVA_HOME variable in your environment to match the 1>&2
echo location of your Java installation. 1>&2

goto fail

:execute
@rem Setup the command line

set CLASSPATH=


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" -jar "%APP_HOME%\gradle\wrapper\gradle-wrapper.jar" %*

:end
@rem End local scope for the variables with windows NT shell
if %ERRORLEVEL% equ 0 goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
set EXIT_CODE=%ERRORLEVEL%
if %EXIT_CODE% equ 0 set EXIT_CODE=1
if not ""=="%GRADLE_EXIT_CONSOLE%" exit %EXIT_CODE%
exit /b %EXIT_CODE%

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega


=============== FILE: settings.gradle ===============

pluginManagement {
    repositories {
        maven {
            name = 'MinecraftForge'
            url = 'https://maven.minecraftforge.net/'
        }
        mavenCentral()
        gradlePluginPortal()
    }
}


=============== FILE: gradle/wrapper/gradle-wrapper.properties ===============

distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-8.14.3-bin.zip
networkTimeout=10000
validateDistributionUrl=true
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/AbsoluteOneBlock.java ===============

package com.zwcess.absoluteoneblock;

import com.zwcess.absoluteoneblock.command.AbsoluteCommands;
import com.zwcess.absoluteoneblock.core.ModCreativeTabs;
import com.zwcess.absoluteoneblock.core.Registration;
import com.zwcess.absoluteoneblock.game.PhaseManager;
import com.zwcess.absoluteoneblock.network.PacketHandler;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.event.RegisterCommandsEvent;
import net.minecraftforge.event.server.ServerStartingEvent;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.ModLoadingContext;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.lifecycle.FMLCommonSetupEvent;
import net.minecraftforge.fml.javafmlmod.FMLJavaModLoadingContext;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import com.zwcess.absoluteoneblock.config.Config;
import net.minecraftforge.fml.config.ModConfig.Type;

@Mod(AbsoluteOneBlock.MOD_ID)
public class AbsoluteOneBlock {
    public static final String MOD_ID = "absoluteoneblock";
    private static final Logger LOGGER = LogManager.getLogger();

    public static final PhaseManager phaseManager = new PhaseManager();

    public AbsoluteOneBlock() {
        IEventBus modEventBus = FMLJavaModLoadingContext.get().getModEventBus();
        modEventBus.addListener(this::commonSetup);
        Registration.register(modEventBus);
        ModCreativeTabs.register(modEventBus);
        
        MinecraftForge.EVENT_BUS.register(this);
        PacketHandler.register();

        ModLoadingContext.get().registerConfig(Type.SERVER, Config.SPEC, "absoluteoneblock-server.toml");
    }

    private void commonSetup(final FMLCommonSetupEvent event) {
        LOGGER.info("Absolute One Block is initializing!");
    }

    @SubscribeEvent
    public void onRegisterCommands(RegisterCommandsEvent event) {
        AbsoluteCommands.register(event.getDispatcher());
    }

    @SubscribeEvent
    public void onServerStarting(ServerStartingEvent event) {
        // Corrected: The method is now named 'load'.
        phaseManager.load(event.getServer());
        LOGGER.info("Absolute One Block systems are loaded for the server.");
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/block/OneBlock.java ===============

// main.java.com.zwcess.absoluteoneblock.block.OneBlock.java
package com.zwcess.absoluteoneblock.block;

import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.SoundType;
import net.minecraft.world.level.block.state.BlockBehaviour;
import net.minecraft.world.level.material.MapColor;

public class OneBlock extends Block {
    public OneBlock() {
        super(BlockBehaviour.Properties.of()
                .mapColor(MapColor.STONE)
                .strength(1.5F, 6.0F)
                .sound(SoundType.STONE)
                .requiresCorrectToolForDrops());
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/client/ClientOneBlockData.java ===============

package com.zwcess.absoluteoneblock.client;

public class ClientOneBlockData {
    private static int blocksBroken;
    private static int blocksNeeded;
    private static String currentPhaseName = "";
    private static String nextPhaseName = "";

    public static void set(int broken, int needed, String currentPhase, String nextPhase) {
        ClientOneBlockData.blocksBroken = broken;
        ClientOneBlockData.blocksNeeded = needed;
        ClientOneBlockData.currentPhaseName = currentPhase;
        ClientOneBlockData.nextPhaseName = nextPhase;
    }

    public static int getBlocksBroken() {
        return blocksBroken;
    }

    public static int getBlocksNeeded() {
        return blocksNeeded;
    }

    public static String getCurrentPhaseName() {
        return currentPhaseName != null ? currentPhaseName : "Loading...";
    }

    public static String getNextPhaseName() {
        return nextPhaseName != null ? nextPhaseName : "???";
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/client/OneBlockHudOverlay.java ===============

package com.zwcess.absoluteoneblock.client;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import net.minecraft.client.Minecraft;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.util.Mth;
import net.minecraftforge.client.gui.overlay.IGuiOverlay;

public class OneBlockHudOverlay {

    @SuppressWarnings("null")
    public static final IGuiOverlay HUD_ONEBLOCK = (gui, guiGraphics, partialTick, screenWidth, screenHeight) -> {
        Minecraft mc = Minecraft.getInstance();
        if (mc.player == null || mc.level == null) return;

        ResourceLocation oneBlockDimensionLocation = new ResourceLocation(AbsoluteOneBlock.MOD_ID, "oneblock_dimension");
        if (!mc.player.level().dimension().location().equals(oneBlockDimensionLocation)) return;

        int blocksBroken = ClientOneBlockData.getBlocksBroken();
        int blocksNeeded = ClientOneBlockData.getBlocksNeeded();
        String phaseName = ClientOneBlockData.getCurrentPhaseName(); // You will need to add this to ClientOneBlockData
        String nextPhaseName = ClientOneBlockData.getNextPhaseName(); // And this one too

        String text;
        float progress = 0.0F;

        if (phaseName.equals("Infinity")) {
            text = "Infinity Phase - Total Broken: " + blocksBroken;
        } else if (blocksNeeded <= 0) {
            text = "Next Phase: " + nextPhaseName;
        } else {
            text = phaseName + " Progress: " + blocksBroken + " / " + blocksNeeded;
            progress = Mth.clamp((float) blocksBroken / blocksNeeded, 0.0F, 1.0F);
        }
        
        int barWidth = 182;
        int barHeight = 5;
        int x = (screenWidth - barWidth) / 2;
        int y = 15;

        guiGraphics.fill(x - 1, y - 1, x + barWidth + 1, y + barHeight + 1, 0xFF000000); // Black border
        guiGraphics.fill(x, y, x + barWidth, y + barHeight, 0xFF404040); // Gray background
        if (progress > 0) {
            guiGraphics.fill(x, y, x + (int)(progress * barWidth), y + barHeight, 0xFF00FF00); // Green progress
        }
        
        int textWidth = mc.font.width(text);
        guiGraphics.drawString(mc.font, text, (screenWidth - textWidth) / 2, y - 12, 0xFFFFFFFF, true);
    };
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/client/PlatformBuilderToolScreen.java ===============

package com.zwcess.absoluteoneblock.client;

import com.mojang.blaze3d.systems.RenderSystem;
import com.zwcess.absoluteoneblock.menu.PlatformBuilderToolMenu;
import net.minecraft.client.gui.GuiGraphics;
import net.minecraft.client.gui.screens.inventory.AbstractContainerScreen;
import net.minecraft.network.chat.Component;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.entity.player.Inventory;

public class PlatformBuilderToolScreen extends AbstractContainerScreen<PlatformBuilderToolMenu> {
    // Change this to use the default Minecraft Dispenser texture
    private static final ResourceLocation TEXTURE = new ResourceLocation("minecraft", "textures/gui/container/dispenser.png");

    public PlatformBuilderToolScreen(PlatformBuilderToolMenu menu, Inventory playerInventory, Component title) {
        super(menu, playerInventory, title);
        this.imageWidth = 176;
        this.imageHeight = 166;
    }

    @Override
    protected void renderBg(GuiGraphics graphics, float partialTicks, int mouseX, int mouseY) {
        RenderSystem.setShaderColor(1.0F, 1.0F, 1.0F, 1.0F);
        RenderSystem.setShaderTexture(0, TEXTURE);
        int x = (this.width - this.imageWidth) / 2;
        int y = (this.height - this.imageHeight) / 2;
        graphics.blit(TEXTURE, x, y, 0, 0, this.imageWidth, this.imageHeight);
    }

    @Override
    public void render(GuiGraphics graphics, int mouseX, int mouseY, float partialTicks) {
        this.renderBackground(graphics);
        super.render(graphics, mouseX, mouseY, partialTicks);
        this.renderTooltip(graphics, mouseX, mouseY);
    }

    @Override
    protected void renderLabels(GuiGraphics graphics, int mouseX, int mouseY) {
        // Use standard vanilla coordinates for the labels
        graphics.drawString(this.font, this.title, this.titleLabelX, 6, 4210752, false);
        graphics.drawString(this.font, this.playerInventoryTitle, this.inventoryLabelX, this.imageHeight - 94, 4210752, false);
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/command/AbsoluteCommands.java ===============

package com.zwcess.absoluteoneblock.command;

import com.mojang.brigadier.CommandDispatcher;
import com.mojang.brigadier.arguments.BoolArgumentType;
import com.mojang.brigadier.arguments.IntegerArgumentType;
import com.zwcess.absoluteoneblock.config.Config;
import com.zwcess.absoluteoneblock.config.ModConfig;
import com.zwcess.absoluteoneblock.dimension.AbsoluteDimensions;
import com.zwcess.absoluteoneblock.game.IslandManager; // <-- NEW: Import IslandManager
import com.zwcess.absoluteoneblock.game.PhaseManager;
import com.zwcess.absoluteoneblock.game.ProgressManager; // <-- NEW: Import ProgressManager

import net.minecraft.commands.CommandSourceStack;
import net.minecraft.commands.Commands;
import net.minecraft.core.BlockPos;
import net.minecraft.network.chat.Component;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.server.level.ServerLevel;

public class AbsoluteCommands {

    @SuppressWarnings("null")
    public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
        dispatcher.register(Commands.literal("oneblock").then(Commands.literal("enter")
        .executes((command) -> {
                ServerPlayer player = command.getSource().getPlayerOrException();
                ServerLevel dimension = player.getServer().getLevel(AbsoluteDimensions.ONEBLOCK_DIMENSION_KEY);

                if (dimension == null) {
                    command.getSource().sendFailure(Component.literal("Dimension not found!"));
                    return 0;
                }

                ProgressManager progressManager = PhaseManager.INSTANCE.getProgressManager();
                IslandManager islandManager = new IslandManager(progressManager);

                // --- THIS IS THE KEY LOGIC ---
                // 1. ALWAYS get or create the persistent island position for the player.
                BlockPos islandPos = islandManager.getOrCreateIslandPosition(player);
                
                // 2. Check if a block exists at that position. If not, create it.
                // This prevents creating a second block if the player already has one.
                if (dimension.getBlockState(islandPos).isAir()) {
                    dimension.setBlock(islandPos, Blocks.DIRT.defaultBlockState(), 3);
                    player.sendSystemMessage(Component.literal("Welcome! Your island has been created."));
                }

                // 3. Teleport the player to their one and only island position.
                player.teleportTo(dimension,
                    islandPos.getX() + 0.5,
                    islandPos.getY() + 1.0,
                    islandPos.getZ() + 0.5,
                    player.getYRot(),
                    player.getXRot());
                
                command.getSource().sendSuccess(() -> Component.literal("Teleported to your One Block."), false);
                return 1;
            }))

            // Subcommand: /oneblock leave
            .then(Commands.literal("leave").executes((command) -> {
                ServerPlayer player = command.getSource().getPlayerOrException();
                ServerLevel overworld = player.getServer().getLevel(ServerLevel.OVERWORLD);

                if (overworld != null) {
                    // Use spawn point for a safer exit
                    BlockPos spawnPoint = overworld.getSharedSpawnPos();
                    player.teleportTo(overworld, spawnPoint.getX(), spawnPoint.getY(), spawnPoint.getZ(), player.getYRot(), player.getXRot());
                    command.getSource().sendSuccess(() -> Component.literal("Teleported to Overworld."), false);
                    return 1;
                } else {
                    command.getSource().sendFailure(Component.literal("Overworld not found!"));
                    return 0;
                }
            }))
            
            // Subcommand: /oneblock reset
            .then(Commands.literal("reset")
                .requires(source -> source.hasPermission(2))
                .executes((command) -> {
                    // This command should also reset island positions
                    ProgressManager progressManager = PhaseManager.INSTANCE.getProgressManager();
                    progressManager.getData().blocksBroken = 0;
                    progressManager.getData().spawnedOneTimeChests.clear();
                    progressManager.getPlayerIslandPositions().clear(); // NEW: Clear island map
                    progressManager.markDirtyAndSave();

                    PhaseManager.INSTANCE.resetPhase(); // Keep internal state reset if needed
                    command.getSource().sendSuccess(() -> Component.literal("Full One Block progression has been reset."), true);
                    return 1;
                }))
            
            // Subcommands: setphase, setblocks (no changes needed here, they work on global progress)
            .then(Commands.literal("setphase")
            .requires(source -> source.hasPermission(2)) // Operator-level permission
            .then(Commands.argument("phase", IntegerArgumentType.integer(0)) // Accepts a positive integer
                .executes((command) -> {
                    int phaseIndex = IntegerArgumentType.getInteger(command, "phase");
                    
                    // Check if the game is in a mode that uses shared progress
                    if (!Config.hasSharedProgress()) {
                        command.getSource().sendFailure(Component.literal("This command only works in COOP or COMPETITIVE_SHARED modes."));
                        return 0;
                    }

                    if (PhaseManager.INSTANCE.setPhase(phaseIndex)) {
                        command.getSource().sendSuccess(() -> 
                            Component.literal("Successfully set global One Block phase to index " + phaseIndex), true);
                        return 1;
                    } else {
                        command.getSource().sendFailure(Component.literal("Invalid phase index. Use a number between 0 and " + (PhaseManager.INSTANCE.getPhases().size() - 1)));
                        return 0;
                    }
                })))

        // Subcommand: /oneblock setblocks <number_of_blocks>
            .then(Commands.literal("setblocks")
                .requires(source -> source.hasPermission(2)) // Operator-level permission
                .then(Commands.argument("blocks", IntegerArgumentType.integer(1)) // Accepts an integer greater than 0
                    .executes((command) -> {
                        int blocksNeeded = IntegerArgumentType.getInteger(command, "blocks");

                        // Check if the game is in a mode that uses shared progress
                        if (!Config.hasSharedProgress()) {
                            command.getSource().sendFailure(Component.literal("This command only works in COOP or COMPETITIVE_SHARED modes."));
                            return 0;
                        }

                        PhaseManager.INSTANCE.setBlocksNeededForNextPhase(blocksNeeded);
                        command.getSource().sendSuccess(() -> 
                            Component.literal("Blocks needed for the next phase transition set to " + blocksNeeded + " from now."), true);
                        return 1;
                    })))
            
            // Subcommand: /oneblock fix
            .then(Commands.literal("fix")
                .executes((command) -> {
                    ServerPlayer player = command.getSource().getPlayerOrException();
                    ServerLevel dimension = player.getServer().getLevel(AbsoluteDimensions.ONEBLOCK_DIMENSION_KEY);

                    if (dimension == null) {
                        command.getSource().sendFailure(Component.literal("Dimension not found!"));
                        return 0;
                    }
                    
                    // --- FIX: Use the same persistent logic as /enter to find the block ---
                    ProgressManager progressManager = PhaseManager.INSTANCE.getProgressManager();
                    ModConfig.GameMode currentMode = Config.getGameMode();

                    BlockPos playerBlockPos;
                    if (currentMode == ModConfig.GameMode.COOP) {
                        playerBlockPos = new BlockPos(0, 100, 0);
                    } else {
                        IslandManager islandManager = new IslandManager(progressManager);
                        playerBlockPos = islandManager.getOrCreateIslandPosition(player);
                    }
                    
                    dimension.setBlock(playerBlockPos, Blocks.DIRT.defaultBlockState(), 3);
                    command.getSource().sendSuccess(() -> Component.literal("Your One Block has been fixed to Dirt."), false);
                    return 1;
                })
            )
            
            // --- FIX: /oneblock mode commands now save persistently ---
            .then(Commands.literal("mode")
                .requires(source -> source.hasPermission(2))
                .then(Commands.literal("coop")
                    .executes(context -> setGameMode(context.getSource(), ModConfig.GameMode.COOP)))
                .then(Commands.literal("competitive_shared") // Renamed for clarity
                    .executes(context -> setGameMode(context.getSource(), ModConfig.GameMode.COMPETITIVE_SHARED)))
                .then(Commands.literal("competitive_solo") // Renamed for clarity
                    .executes(context -> setGameMode(context.getSource(), ModConfig.GameMode.COMPETITIVE_SOLO)))
            )

            // --- NEW: Command to control island distribution ---
            .then(Commands.literal("settings")
                .requires(source -> source.hasPermission(2))
                .then(Commands.literal("distribution")
                    .then(Commands.argument("equal", BoolArgumentType.bool())
                        .executes(context -> {
                            boolean isEqual = BoolArgumentType.getBool(context, "equal");
                            Config.EQUALLY_DISTRIBUTED.set(isEqual);
                            // Configs are auto-saved, but a message is good practice.
                            context.getSource().sendSuccess(() -> Component.literal("Island distribution set to: " + (isEqual ? "Equal" : "Sequential")), true);
                            return 1;
                        })
                    )
                )
            )
        );
    }

    // Helper method to avoid repeating code for setting game mode
    private static int setGameMode(CommandSourceStack source, ModConfig.GameMode mode) {
        // Get the current mode from the config to see if we're actually changing anything
        ModConfig.GameMode currentMode = Config.getGameMode();

        if (currentMode == mode) {
            source.sendSuccess(() -> Component.literal("Game mode is already set to " + mode.name()), false);
            return 1;
        }

        // Set the new value in the config file
        Config.GAME_MODE.set(mode);

        boolean wasCompetitive = (currentMode == ModConfig.GameMode.COMPETITIVE_SHARED || currentMode == ModConfig.GameMode.COMPETITIVE_SOLO);
        boolean isNowCompetitive = (mode == ModConfig.GameMode.COMPETITIVE_SHARED || mode == ModConfig.GameMode.COMPETITIVE_SOLO);

        if (wasCompetitive != isNowCompetitive) {
            source.sendSuccess(() -> Component.literal("Game mode set to " + mode.name() + ". A server restart is required to apply the change and wipe the world."), true);
        } else {
            source.sendSuccess(() -> Component.literal("Game mode set to " + mode.name() + ". No restart is needed."), true);
        }
        
        return 1;
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/config/Config.java ===============

package com.zwcess.absoluteoneblock.config;

import net.minecraftforge.common.ForgeConfigSpec;
import net.minecraftforge.fml.common.Mod;

@Mod.EventBusSubscriber(bus = Mod.EventBusSubscriber.Bus.MOD)
public class Config {
    public static final ForgeConfigSpec.Builder BUILDER = new ForgeConfigSpec.Builder();
    public static final ForgeConfigSpec SPEC;

    public static final ForgeConfigSpec.EnumValue<ModConfig.GameMode> GAME_MODE;
    public static final ForgeConfigSpec.BooleanValue EQUALLY_DISTRIBUTED;
    public static final ForgeConfigSpec.IntValue COMPETITIVE_SPACING;

    static {
        BUILDER.push("Absolute One Block Settings");

        GAME_MODE = BUILDER
                .comment("The game mode for the world. COOP, COMPETITIVE_SHARED, or COMPETITIVE_SOLO.")
                .defineEnum("gameMode", ModConfig.GameMode.COOP);

        EQUALLY_DISTRIBUTED = BUILDER
                .comment("If true, competitive islands will be spaced out to fill a circle. If false, they will be placed in a straight line.")
                .define("equallyDistributed", true);
        
        COMPETITIVE_SPACING = BUILDER
                .comment("The distance between islands in competitive mode.")
                .defineInRange("competitiveSpacing", 500, 50, 5000);

        BUILDER.pop();
        SPEC = BUILDER.build();
    }

    public static ModConfig.GameMode getGameMode() {
        return GAME_MODE.get();
    }

    public static boolean isCoopMode() {
        return getGameMode() == ModConfig.GameMode.COOP;
    }
    
    public static boolean isCompetitiveMode() {
        ModConfig.GameMode mode = getGameMode();
        return mode == ModConfig.GameMode.COMPETITIVE_SHARED || mode == ModConfig.GameMode.COMPETITIVE_SOLO;
    }
    
    public static boolean hasSharedProgress() {
        ModConfig.GameMode mode = getGameMode();
        return mode == ModConfig.GameMode.COOP || mode == ModConfig.GameMode.COMPETITIVE_SHARED;
    }
    
    public static boolean hasOwnIslands() {
        ModConfig.GameMode mode = getGameMode();
        return mode == ModConfig.GameMode.COMPETITIVE_SHARED || mode == ModConfig.GameMode.COMPETITIVE_SOLO;
    }

    public static boolean isEquallyDistributed() {
        return EQUALLY_DISTRIBUTED.get();
    }

    public static int getCompetitiveSpacing() {
        return COMPETITIVE_SPACING.get();
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/config/ModConfig.java ===============

package com.zwcess.absoluteoneblock.config;

public class ModConfig {
    public enum GameMode {
        COOP,
        COMPETITIVE_SHARED,
        COMPETITIVE_SOLO
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/core/ModCreativeTabs.java ===============

// main.java.com.zwcess.absoluteoneblock.core.ModCreativeTabs.java
package com.zwcess.absoluteoneblock.core;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import net.minecraft.core.registries.Registries;
import net.minecraft.network.chat.Component;
import net.minecraft.world.item.CreativeModeTab;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.RegistryObject;

public class ModCreativeTabs {
    public static final DeferredRegister<CreativeModeTab> CREATIVE_MODE_TABS =
            DeferredRegister.create(Registries.CREATIVE_MODE_TAB, AbsoluteOneBlock.MOD_ID);

    public static final RegistryObject<CreativeModeTab> ONE_BLOCK_TAB = CREATIVE_MODE_TABS.register("one_block_tab",
            () -> CreativeModeTab.builder()
                    .icon(() -> new ItemStack(Registration.ONE_BLOCK_ITEM.get()))
                    .title(Component.translatable("creativetab.absoluteoneblock.one_block_tab"))
                    .displayItems((displayParameters, output) -> {
                        output.accept(Registration.ONE_BLOCK_ITEM.get());
                        output.accept(Registration.HEART_OF_THE_VOID.get());
                        output.accept(Registration.PLATFORM_BUILDER_TOOL.get());
                    })
                    .build());

    public static void register(IEventBus eventBus) {
        CREATIVE_MODE_TABS.register(eventBus);
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/core/Registration.java ===============

// main.java.com.zwcess.absoluteoneblock.core.Registration.java
package com.zwcess.absoluteoneblock.core;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import com.zwcess.absoluteoneblock.block.OneBlock;
import com.zwcess.absoluteoneblock.dimension.OneBlockChunkGenerator;
import com.zwcess.absoluteoneblock.item.HeartOfTheVoidItem;
import com.zwcess.absoluteoneblock.item.PlatformBuilderToolItem;
import com.zwcess.absoluteoneblock.loot.AddItemModifier;
import com.zwcess.absoluteoneblock.menu.PlatformBuilderToolMenu;
import com.mojang.serialization.Codec;

import net.minecraft.core.registries.Registries;
import net.minecraft.world.inventory.MenuType;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.entity.BlockEntityType;
import net.minecraft.world.level.chunk.ChunkGenerator;
import net.minecraftforge.common.extensions.IForgeMenuType;
import net.minecraftforge.common.loot.IGlobalLootModifier;
import net.minecraftforge.eventbus.api.IEventBus;
import net.minecraftforge.registries.DeferredRegister;
import net.minecraftforge.registries.ForgeRegistries;
import net.minecraftforge.registries.RegistryObject;

public class Registration {

        public static final DeferredRegister<Block> BLOCKS =
                DeferredRegister.create(ForgeRegistries.BLOCKS, AbsoluteOneBlock.MOD_ID);

        public static final DeferredRegister<Item> ITEMS =
                DeferredRegister.create(ForgeRegistries.ITEMS, AbsoluteOneBlock.MOD_ID);
        
        public static final DeferredRegister<MenuType<?>> MENUS = DeferredRegister.create(ForgeRegistries.MENU_TYPES, AbsoluteOneBlock.MOD_ID);

        public static final RegistryObject<Item> HEART_OF_THE_VOID = ITEMS.register("heart_of_the_void",
        () -> new HeartOfTheVoidItem(new Item.Properties()));

        public static final DeferredRegister<BlockEntityType<?>> BLOCK_ENTITIES =
                DeferredRegister.create(ForgeRegistries.BLOCK_ENTITY_TYPES, AbsoluteOneBlock.MOD_ID);

        public static final RegistryObject<Block> ONE_BLOCK = BLOCKS.register("one_block", OneBlock::new);

        public static final DeferredRegister<Codec<? extends ChunkGenerator>> CHUNK_GENERATORS =
                DeferredRegister.create(Registries.CHUNK_GENERATOR, AbsoluteOneBlock.MOD_ID);

        public static final RegistryObject<Codec<OneBlockChunkGenerator>> ONE_BLOCK_CHUNK_GENERATOR =
                CHUNK_GENERATORS.register("one_block", () -> OneBlockChunkGenerator.CODEC);
        
        public static final DeferredRegister<Codec<? extends IGlobalLootModifier>> LOOT_MODIFIER_SERIALIZERS =
        DeferredRegister.create(ForgeRegistries.Keys.GLOBAL_LOOT_MODIFIER_SERIALIZERS, AbsoluteOneBlock.MOD_ID);

        public static final RegistryObject<Codec<? extends IGlobalLootModifier>> ADD_ITEM =
        LOOT_MODIFIER_SERIALIZERS.register("add_item", AddItemModifier.CODEC);

        public static final RegistryObject<Item> ONE_BLOCK_ITEM = ITEMS.register("one_block",
                () -> new BlockItem(ONE_BLOCK.get(), new Item.Properties()));
        
        public static final RegistryObject<Item> PLATFORM_BUILDER_TOOL = ITEMS.register(
        "platform_builder_tool", 
                () -> new PlatformBuilderToolItem(new Item.Properties())
        );

        public static final RegistryObject<MenuType<PlatformBuilderToolMenu>> PLATFORM_BUILDER_TOOL_MENU =
                MENUS.register("platform_builder_tool_menu",
                        () -> IForgeMenuType.create((windowId, inv, buf) -> new PlatformBuilderToolMenu(windowId, inv, buf))
                );

        public static void register(IEventBus eventBus) {
                CHUNK_GENERATORS.register(eventBus);
                BLOCKS.register(eventBus);
                ITEMS.register(eventBus);
                BLOCK_ENTITIES.register(eventBus);
                MENUS.register(eventBus);
                LOOT_MODIFIER_SERIALIZERS.register(eventBus);
        }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/dimension/AbsoluteDimensions.java ===============

// main.java.com.zwcess.absoluteoneblock.dimension.AbsoluteDimensions.java
package com.zwcess.absoluteoneblock.dimension;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.dimension.DimensionType;

public class AbsoluteDimensions {
    public static final ResourceKey<Level> ONEBLOCK_DIMENSION_KEY = ResourceKey.create(Registries.DIMENSION,
            ResourceLocation.fromNamespaceAndPath(AbsoluteOneBlock.MOD_ID, "oneblock_dimension")); // Corrected

    public static final ResourceKey<DimensionType> ONEBLOCK_DIMENSION_TYPE_KEY = ResourceKey.create(Registries.DIMENSION_TYPE,
            ResourceLocation.fromNamespaceAndPath(AbsoluteOneBlock.MOD_ID, "oneblock_dimension_type")); // Corrected
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/dimension/OneBlockChunkGenerator.java ===============

// main.java.com.zwcess.absoluteoneblock.dimension.OneBlockChunkGenerator.java
package com.zwcess.absoluteoneblock.dimension;

import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import com.zwcess.absoluteoneblock.core.Registration;
import net.minecraft.core.BlockPos;
import net.minecraft.core.Holder;
import net.minecraft.server.level.WorldGenRegion;
import net.minecraft.world.level.LevelHeightAccessor;
import net.minecraft.world.level.StructureManager;
import net.minecraft.world.level.biome.BiomeSource;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.chunk.ChunkAccess;
import net.minecraft.world.level.chunk.ChunkGenerator;
import net.minecraft.world.level.levelgen.Heightmap;
import net.minecraft.world.level.levelgen.NoiseBasedChunkGenerator;
import net.minecraft.world.level.levelgen.NoiseGeneratorSettings;
import net.minecraft.world.level.levelgen.RandomState;
import net.minecraft.world.level.levelgen.blending.Blender;

import javax.annotation.Nonnull;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.Executor;

public class OneBlockChunkGenerator extends NoiseBasedChunkGenerator {

    // --- THIS IS THE FINAL FIX ---
    // We hold our own reference to the settings to provide a stable getter for the CODEC.
    private final Holder<NoiseGeneratorSettings> settingsHolder;

    public static final Codec<OneBlockChunkGenerator> CODEC = RecordCodecBuilder.create(instance ->
        instance.group(
            BiomeSource.CODEC.fieldOf("biome_source").forGetter(ChunkGenerator::getBiomeSource),
            NoiseGeneratorSettings.CODEC.fieldOf("settings").forGetter(g -> g.settingsHolder) // Use our own field
        ).apply(instance, OneBlockChunkGenerator::new));
    // --- END OF FIX ---

    public OneBlockChunkGenerator(BiomeSource biomeSource, Holder<NoiseGeneratorSettings> settings) {
        super(biomeSource, settings);
        this.settingsHolder = settings; // Store the settings locally
    }

    @Override
    @Nonnull
    protected Codec<? extends ChunkGenerator> codec() {
        return CODEC;
    }

    // By extending NoiseBasedChunkGenerator, we get all the complex biome noise for free.
    // We only need to override the methods that actually place blocks.

    @Override
    @Nonnull
    public CompletableFuture<ChunkAccess> fillFromNoise(@Nonnull Executor executor, @Nonnull Blender blender, @Nonnull RandomState randomState, @Nonnull StructureManager structureManager, @Nonnull ChunkAccess chunkAccess) {
        // We override this method to do nothing, preventing terrain from generating and creating a void.
        return CompletableFuture.completedFuture(chunkAccess);
    }

    @Override
    public void buildSurface(@Nonnull WorldGenRegion level, @Nonnull StructureManager structureManager, @Nonnull RandomState randomState, @Nonnull ChunkAccess chunk) {
        // Instead of building a surface, we use this hook to place our single starting block.
        if (chunk.getPos().x == 0 && chunk.getPos().z == 0) {
            BlockPos pos = new BlockPos(0, 100, 0);
            if (level.getBlockState(pos).isAir()) {
                level.setBlock(pos, Registration.ONE_BLOCK.get().defaultBlockState(), 2);
            }
            BlockPos pos_dirt = new BlockPos(0, 99, 0);
            if (level.getBlockState(pos_dirt).isAir()) {
                level.setBlock(pos_dirt, Blocks.DIRT.defaultBlockState(), 2);
            }
        }
    }
    
    // We must also override getBaseHeight to prevent issues with structure placement checks in a void world.
    @Override
    public int getBaseHeight(int x, int z, @Nonnull Heightmap.Types types, @Nonnull LevelHeightAccessor level, @Nonnull RandomState randomState) {
        return 0; // Return 0 for void world stability.
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/event/BlockBreakEventHandler.java ===============

package com.zwcess.absoluteoneblock.event;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import com.zwcess.absoluteoneblock.config.Config;
import com.zwcess.absoluteoneblock.core.Registration;
import com.zwcess.absoluteoneblock.game.GameModeManager;
import com.zwcess.absoluteoneblock.game.NextSpawn;
import com.zwcess.absoluteoneblock.game.Phase;
import com.zwcess.absoluteoneblock.game.PhaseManager;
import com.zwcess.absoluteoneblock.game.PlayerPhaseData;
import com.zwcess.absoluteoneblock.game.ProgressManager;
import com.zwcess.absoluteoneblock.game.WorldProgressData;
import com.zwcess.absoluteoneblock.network.PacketHandler;
import com.zwcess.absoluteoneblock.network.SyncProgressS2CPacket;
import com.zwcess.absoluteoneblock.util.AdvancementHelper;

import net.minecraft.core.BlockPos;
import net.minecraft.core.particles.BlockParticleOption;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.sounds.SoundSource;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.MobSpawnType;
import net.minecraft.world.entity.monster.warden.Warden;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.entity.BlockEntity;
import net.minecraft.world.level.block.entity.ChestBlockEntity;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraftforge.event.level.BlockEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.ModList;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.network.PacketDistributor;
import net.minecraftforge.registries.ForgeRegistries;

import java.util.List;
import java.util.Map;
import java.util.Random;

@Mod.EventBusSubscriber(modid = AbsoluteOneBlock.MOD_ID)
public class BlockBreakEventHandler {
    private static final Random random = new Random();

    @SuppressWarnings("null")
    @SubscribeEvent
    public static void onBlockBroken(BlockEvent.BreakEvent event) {
        // Early exit if client-side
        if (event.getLevel().isClientSide()) {
            return;
        }

        ServerLevel level = (ServerLevel) event.getLevel();
        ServerPlayer player = (ServerPlayer) event.getPlayer();
        BlockPos brokenPos = event.getPos();
        
        // Check if this is the player's One Block (works for both coop and competitive)
        if (!GameModeManager.isPlayerOneBlock(player, brokenPos)) {
            return; // Not their block, ignore it
        }

        event.setCanceled(true);

        BlockState brokenState = event.getState();
        PhaseManager phaseManager = AbsoluteOneBlock.phaseManager;

        NextSpawn nextSpawn = phaseManager.getNextSpawn(player);

        ProgressManager progressManager = phaseManager.getProgressManager();
        WorldProgressData worldData = progressManager.getData();

        if (!worldData.isGameInProgress && worldData.blocksBroken > 0) {
            worldData.isGameInProgress = true;
            progressManager.markDirtyAndSave();
        }

        // Handle drops for non-custom blocks
        if (!brokenState.is(Registration.ONE_BLOCK.get())) {
            if (player.hasCorrectToolForDrops(brokenState)) {
                List<ItemStack> drops = Block.getDrops(brokenState, level, event.getPos(), null, player, player.getMainHandItem());
                drops.forEach(drop -> {
                    if (!player.getInventory().add(drop)) {
                        Block.popResource(level, event.getPos(), drop);
                    }
                });
            }
            level.playSound(null, event.getPos(), brokenState.getSoundType().getBreakSound(), SoundSource.BLOCKS, 1.0f, 1.0f);
            level.sendParticles(new BlockParticleOption(ParticleTypes.BLOCK, brokenState),
                event.getPos().getX() + 0.5, event.getPos().getY() + 0.5, event.getPos().getZ() + 0.5,
                12, 0.2, 0.2, 0.2, 0.15);
        }

        // Place the next block or chest
        BlockPos playerBlockPos = GameModeManager.getPlayerBlockPosition(player);
        if (nextSpawn.isChest()) {
            placeLootChest(level, playerBlockPos, nextSpawn);
        } else {
            level.setBlock(playerBlockPos, nextSpawn.getBlock().defaultBlockState(), 3);
        }

        // Damage the held item
        ItemStack heldItem = player.getMainHandItem();
        if (!player.isCreative() && heldItem.isDamageableItem()) {
            heldItem.hurtAndBreak(1, player, (p) -> p.broadcastBreakEvent(player.getUsedItemHand()));
        }

        // Try to spawn a mob
        trySpawnMob(level, playerBlockPos.above(), phaseManager, player);
        
        // Sync progress data based on game mode
        syncProgressData(level, player, phaseManager);

        if (Config.hasSharedProgress()) {
            int totalBlocks = phaseManager.getProgressData().blocksBroken;
            checkBlockMilestones(player, totalBlocks);
        } else {
            PlayerPhaseData playerData = phaseManager.getPlayerData(player);
            int totalBlocks = playerData.getBlocksBroken();
            checkBlockMilestones(player, totalBlocks);
        }
    }

    private static void checkBlockMilestones(ServerPlayer player, int totalBlocks) {
        // Grant achievements at specific milestones
        switch (totalBlocks) {
            case 1:
                AdvancementHelper.grantAdvancement(player, "challenges/first_block");
                break;
            case 100:
                AdvancementHelper.grantAdvancement(player, "challenges/hundred_blocks");
                break;
            case 1000:
                AdvancementHelper.grantAdvancement(player, "challenges/thousand_blocks");
                break;
            case 10000:
                AdvancementHelper.grantAdvancement(player, "challenges/ten_thousand_blocks");
                break;
        }
    }
    
    private static void syncProgressData(ServerLevel level, ServerPlayer player, PhaseManager phaseManager) {
        if (Config.hasSharedProgress()) {
            // Shared progress: send global data to everyone in the dimension
            Phase currentPhase = phaseManager.getCurrentPhase();
            Phase nextPhase = phaseManager.getNextPhase();
            
            if (currentPhase != null) {
                int blocksBroken = phaseManager.getProgressData().blocksBroken;
                int nextThreshold = currentPhase.repeatable ? 0 : phaseManager.getNextPhaseBlocksNeeded();
                String currentName = currentPhase.name;
                String nextName = (nextPhase != null) ? nextPhase.name : "Infinity";
                
                SyncProgressS2CPacket packet = new SyncProgressS2CPacket(blocksBroken, nextThreshold, currentName, nextName);
                PacketHandler.INSTANCE.send(PacketDistributor.DIMENSION.with(level::dimension), packet);
            }
        } else {
            // Solo progress: send only to the player who broke the block
            PlayerPhaseData playerData = phaseManager.getPlayerData(player);
            Phase currentPhase = phaseManager.getPlayerCurrentPhase(player);
            Phase nextPhase = phaseManager.getPlayerNextPhase(player);
            
            int blocksBroken = playerData.getBlocksBroken();
            int nextThreshold = currentPhase.repeatable ? 0 : currentPhase.blocks_needed;
            String currentName = currentPhase.name;
            String nextName = (nextPhase != null) ? nextPhase.name : "Infinity";
            
            PacketHandler.sendToPlayer(
                new SyncProgressS2CPacket(blocksBroken, nextThreshold, currentName, nextName),
                player
            );
        }
    }
    
    private static void placeLootChest(ServerLevel level, BlockPos pos, NextSpawn spawn) {
        level.setBlock(pos, Blocks.CHEST.defaultBlockState(), 3);
        BlockEntity blockEntity = level.getBlockEntity(pos);
        if (blockEntity instanceof ChestBlockEntity chest) {
            @SuppressWarnings("null")
            ResourceLocation lootTableRL = ResourceLocation.tryParse(spawn.getChestData().loot_table);
            if (lootTableRL != null) {
                chest.setLootTable(lootTableRL, level.getRandom().nextLong());
            }
        }
    }

    private static void trySpawnMob(ServerLevel level, BlockPos spawnPos, PhaseManager phaseManager, ServerPlayer player) {
        Phase currentPhase = phaseManager.getPlayerCurrentPhase(player);
        if (currentPhase == null || currentPhase.mobs == null || currentPhase.mobs.isEmpty()) return;

        if (random.nextDouble() < currentPhase.mob_spawn_chance) {
            String mobKey = getWeightedRandomMob(currentPhase.mobs);
            if (mobKey == null) return;
            
            if (mobKey.startsWith("absoluteoneblock:")) {
                handleSpecialSpawn(mobKey, level, spawnPos);
                return;
            }

            ResourceLocation mobId = ResourceLocation.tryParse(mobKey);
            if (mobId == null) return;
            
            if (!ModList.get().isLoaded(mobId.getNamespace())) return;
            
            EntityType<?> mobType = ForgeRegistries.ENTITY_TYPES.getValue(mobId);
            if (mobType != null) {
                mobType.spawn(level, spawnPos, MobSpawnType.EVENT);
            }
        }
    }

    private static void handleSpecialSpawn(String key, ServerLevel level, BlockPos pos) {
        if (key.equals("absoluteoneblock:warden_spawn")) {
            Warden warden = EntityType.WARDEN.create(level);
            if (warden != null) {
                warden.setPos(pos.getX() + 0.5, pos.getY(), pos.getZ() + 0.5);
                level.addFreshEntity(warden);
            }
        }
    }

    private static String getWeightedRandomMob(Map<String, Object> mobProbabilities) {
        double totalWeight = mobProbabilities.values().stream().mapToDouble(value -> {
            if (value instanceof Double) return (Double) value;
            if (value instanceof Map) {
                Object weight = ((Map<?, ?>) value).get("weight");
                if (weight instanceof Number) return ((Number) weight).doubleValue();
            }
            return 0.0;
        }).sum();

        if (totalWeight <= 0) return null;
        double randomValue = random.nextDouble() * totalWeight;

        for (Map.Entry<String, Object> entry : mobProbabilities.entrySet()) {
            double currentWeight = 0;
            if (entry.getValue() instanceof Double) currentWeight = (Double) entry.getValue();
            else if (entry.getValue() instanceof Map) {
                Object weight = ((Map<?, ?>) entry.getValue()).get("weight");
                if (weight instanceof Number) currentWeight = ((Number) weight).doubleValue();
            }
            
            randomValue -= currentWeight;
            if (randomValue <= 0.0) return entry.getKey();
        }
        return null;
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/event/ClientForgeEvents.java ===============

package com.zwcess.absoluteoneblock.event;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import com.zwcess.absoluteoneblock.item.PlatformBuilderToolItem;
import com.zwcess.absoluteoneblock.network.C2SUpdatePlatformSizePacket;
import com.zwcess.absoluteoneblock.network.PacketHandler;
import net.minecraft.client.Minecraft;
import net.minecraft.network.chat.Component;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.client.event.InputEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;

@Mod.EventBusSubscriber(modid = AbsoluteOneBlock.MOD_ID, value = Dist.CLIENT, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class ClientForgeEvents {

    @SubscribeEvent
    public static void onMouseScroll(InputEvent.MouseScrollingEvent event) {
        Player player = Minecraft.getInstance().player;
        if (player == null || !player.isShiftKeyDown()) return;

        ItemStack stack = player.getMainHandItem();
        if (stack.getItem() instanceof PlatformBuilderToolItem) {
            // We are holding the tool and sneaking, so change the size instead of scrolling the hotbar
            event.setCanceled(true);

            int width = PlatformBuilderToolItem.getPlatformWidth(stack);
            int height = PlatformBuilderToolItem.getPlatformHeight(stack);
            
            // Scrolling up increases size, scrolling down decreases
            int change = event.getScrollDelta() > 0 ? 2 : -2; // Change by 2 to go from 1x1 to 3x3, etc.
            int newWidth = width + change;
            int newHeight = height + change;

            // Clamp the values to be at least 1 and odd
            newWidth = Math.max(1, newWidth);
            newHeight = Math.max(1, newHeight);

            // Enforce the maximum block count (576)
            if (newWidth * newHeight > PlatformBuilderToolItem.MAX_BLOCKS) {
                // Don't apply the change if it exceeds the max
                return;
            }

            // Send the update to the server
            PacketHandler.sendToServer(new C2SUpdatePlatformSizePacket(newWidth, newHeight));
            // Also update the client-side stack immediately for responsiveness
            PlatformBuilderToolItem.setPlatformSize(stack, newWidth, newHeight);

            // Show feedback to the player on the action bar
            player.displayClientMessage(Component.literal("Platform Size: " + newWidth + "x" + newHeight), true);
        }
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/event/ClientModEvents.java ===============

// main.java.com.zwcess.absoluteoneblock.event.ClientModEvents.java
package com.zwcess.absoluteoneblock.event;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import com.zwcess.absoluteoneblock.client.OneBlockHudOverlay;
import com.zwcess.absoluteoneblock.core.Registration;

import net.minecraft.client.gui.screens.MenuScreens;
import net.minecraftforge.api.distmarker.Dist;
import net.minecraftforge.client.event.RegisterGuiOverlaysEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.event.lifecycle.FMLClientSetupEvent;

@Mod.EventBusSubscriber(modid = AbsoluteOneBlock.MOD_ID, value = Dist.CLIENT, bus = Mod.EventBusSubscriber.Bus.MOD)
public class ClientModEvents {
    @SubscribeEvent
    public static void registerGuiOverlays(RegisterGuiOverlaysEvent event) {
        event.registerAboveAll("oneblock_progress", OneBlockHudOverlay.HUD_ONEBLOCK);
    }

    @SubscribeEvent
    public static void onClientSetup(FMLClientSetupEvent event) {
        MenuScreens.register(Registration.PLATFORM_BUILDER_TOOL_MENU.get(),
                com.zwcess.absoluteoneblock.client.PlatformBuilderToolScreen::new);
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/event/HeartOfTheVoidHandler.java ===============

package com.zwcess.absoluteoneblock.event;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import com.zwcess.absoluteoneblock.core.Registration;
import com.zwcess.absoluteoneblock.game.GameModeManager;
import com.zwcess.absoluteoneblock.util.AdvancementHelper;

import net.minecraft.core.BlockPos;
import net.minecraft.core.particles.ParticleTypes;
import net.minecraft.network.chat.Component;
import net.minecraft.network.protocol.game.ClientboundSetTitleTextPacket;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.sounds.SoundEvents;
import net.minecraft.sounds.SoundSource;
import net.minecraft.util.RandomSource;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.event.entity.living.LivingDamageEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;

@Mod.EventBusSubscriber(modid = AbsoluteOneBlock.MOD_ID)
public class HeartOfTheVoidHandler {

    @SubscribeEvent
    public static void onPlayerDamage(LivingDamageEvent event) {
        // Only handle server-side player damage
        if (!(event.getEntity() instanceof ServerPlayer player)) {
            return;
        }

        // Check if the damage is from the void
        if (!event.getSource().is(net.minecraft.world.damagesource.DamageTypes.FELL_OUT_OF_WORLD)) {
            return;
        }

        // Check if damage would be fatal
        if (player.getHealth() - event.getAmount() > 0) {
            return;
        }

        // Try to find Heart of the Void in hands first (like totem), then inventory
        ItemStack heartItem = findHeartOfTheVoid(player);
        
        if (!heartItem.isEmpty()) {
            // Cancel the damage
            event.setCanceled(true);
            
            // Consume the item
            heartItem.shrink(1);
            
            // Teleport player to safety
            teleportToSafety(player);
            
            // Apply effects
            applyVoidSaveEffects(player);
            
            // Play effects
            playVoidSaveEffects(player);

            AdvancementHelper.grantAdvancement(player, "challenges/survived_void");
        }
    }

    private static ItemStack findHeartOfTheVoid(Player player) {
        // Check main hand
        ItemStack mainHand = player.getMainHandItem();
        if (mainHand.is(Registration.HEART_OF_THE_VOID.get())) {
            return mainHand;
        }
        
        // Check off hand
        ItemStack offHand = player.getOffhandItem();
        if (offHand.is(Registration.HEART_OF_THE_VOID.get())) {
            return offHand;
        }
        
        // Check inventory
        for (ItemStack stack : player.getInventory().items) {
            if (stack.is(Registration.HEART_OF_THE_VOID.get())) {
                return stack;
            }
        }
        
        return ItemStack.EMPTY;
    }

    private static void teleportToSafety(ServerPlayer player) {
        ServerLevel level = player.serverLevel();
        
        // Get their One Block position (works for both coop and competitive)
        BlockPos safePos = GameModeManager.getPlayerBlockPosition(player);
        
        // Teleport to their One Block + 1 block up (standing on the block)
        player.teleportTo(level, 
            safePos.getX() + 0.5, 
            safePos.getY() + 1.0, 
            safePos.getZ() + 0.5, 
            player.getYRot(), 
            player.getXRot());
    }

    private static void applyVoidSaveEffects(ServerPlayer player) {
        // Heal to 1 heart (like totem)
        player.setHealth(1.0F);
        
        // Clear negative effects
        player.removeAllEffects();
        
        // Apply protective buffs (same as totem)
        player.addEffect(new MobEffectInstance(MobEffects.REGENERATION, 900, 1)); // 45 seconds Regen II
        player.addEffect(new MobEffectInstance(MobEffects.ABSORPTION, 100, 1));   // 5 seconds Absorption II
        player.addEffect(new MobEffectInstance(MobEffects.FIRE_RESISTANCE, 800, 0)); // 40 seconds Fire Resistance
        
        // Optional: Add Slow Falling to prevent immediate death from fall damage
        player.addEffect(new MobEffectInstance(MobEffects.SLOW_FALLING, 200, 0)); // 10 seconds
    }

    private static void playVoidSaveEffects(ServerPlayer player) {
        ServerLevel level = player.serverLevel();
        RandomSource random = player.getRandom();
        
        // Play totem sound
        level.playSound(null, player.blockPosition(), 
            SoundEvents.TOTEM_USE, 
            SoundSource.PLAYERS, 
            1.0F, 1.0F);
        
        // Spawn totem particles on the server
        level.sendParticles(ParticleTypes.TOTEM_OF_UNDYING,
            player.getX(), player.getY() + player.getEyeHeight() / 2.0D, player.getZ(), // Position
            35,                     // Count
            0.5D, 0.5D, 0.5D,       // Spread
            0.05D);                 // Speed

        // Randomly choose one of the two messages
        String messageKey = random.nextBoolean() ?
                "item.absoluteoneblock.heart_of_the_void.used1" :
                "item.absoluteoneblock.heart_of_the_void.used2";
        
        Component titleText = Component.translatable(messageKey);

        // Send the chosen message as a title to the player
        player.connection.send(new ClientboundSetTitleTextPacket(titleText));
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/event/ItemCapabilityEventHandler.java ===============

package com.zwcess.absoluteoneblock.event;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import com.zwcess.absoluteoneblock.core.Registration;
import net.minecraft.core.Direction;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.common.capabilities.Capability;
import net.minecraftforge.common.capabilities.ICapabilitySerializable;
import net.minecraftforge.common.util.LazyOptional;
import net.minecraftforge.event.AttachCapabilitiesEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.items.IItemHandler;
import net.minecraftforge.items.ItemStackHandler;
import net.minecraftforge.common.capabilities.ForgeCapabilities;

import javax.annotation.Nullable;

@Mod.EventBusSubscriber(modid = AbsoluteOneBlock.MOD_ID, bus = Mod.EventBusSubscriber.Bus.FORGE)
public class ItemCapabilityEventHandler {

    @SubscribeEvent
    public static void onAttachCapabilities(AttachCapabilitiesEvent<ItemStack> event) {
        ItemStack stack = event.getObject();
        if (stack.getItem() == Registration.PLATFORM_BUILDER_TOOL.get()) {
            ICapabilitySerializable<CompoundTag> provider = new ICapabilitySerializable<>() {
                private final ItemStackHandler handler = new ItemStackHandler(9);
                private final LazyOptional<IItemHandler> optional = LazyOptional.of(() -> handler);

                @Override
                public <T> LazyOptional<T> getCapability(Capability<T> cap, @Nullable Direction side) {
                    return cap == ForgeCapabilities.ITEM_HANDLER ? optional.cast() : LazyOptional.empty();
                }

                @Override
                public CompoundTag serializeNBT() {
                    return handler.serializeNBT();
                }

                @Override
                public void deserializeNBT(CompoundTag nbt) {
                    handler.deserializeNBT(nbt);
                }
            };

            event.addCapability(new ResourceLocation(AbsoluteOneBlock.MOD_ID, "platform_builder_inventory"), provider);
        }
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/event/PlayerEventHandler.java ===============

package com.zwcess.absoluteoneblock.event;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import com.zwcess.absoluteoneblock.config.Config;
import com.zwcess.absoluteoneblock.game.GameModeManager;
import com.zwcess.absoluteoneblock.game.Phase;
import com.zwcess.absoluteoneblock.game.PhaseManager;
import com.zwcess.absoluteoneblock.network.PacketHandler;
import com.zwcess.absoluteoneblock.network.SyncProgressS2CPacket;

import net.minecraft.core.BlockPos;
import net.minecraft.core.registries.Registries;
import net.minecraft.resources.ResourceKey;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.level.Level;
import net.minecraftforge.event.entity.player.PlayerEvent;
import net.minecraftforge.eventbus.api.SubscribeEvent;
import net.minecraftforge.fml.common.Mod;

@Mod.EventBusSubscriber(modid = AbsoluteOneBlock.MOD_ID)
public class PlayerEventHandler {

    private static final ResourceKey<Level> ONEBLOCK_DIM = ResourceKey.create(
        Registries.DIMENSION,
        ResourceLocation.fromNamespaceAndPath(AbsoluteOneBlock.MOD_ID, "oneblock_dimension")
    );

    @SubscribeEvent
    public static void onPlayerLoggedIn(PlayerEvent.PlayerLoggedInEvent event) {
        if (event.getEntity() instanceof ServerPlayer player) {
            ServerLevel level = player.serverLevel();
            
            // If player is joining and is in the One Block dimension
            if (level.dimension().equals(ONEBLOCK_DIM)) {
                // Get or create their spawn position
                BlockPos spawnPos = GameModeManager.getPlayerBlockPosition(player);
                
                // In competitive mode, create their island if it doesn't exist
                if (Config.isCompetitiveMode()) {
                    if (level.getBlockState(spawnPos).isAir()) {
                        GameModeManager.createPlayerIsland(level, spawnPos);
                    }
                }
                
                // Teleport player to their spawn position (slightly above the block)
                player.teleportTo(level, 
                    spawnPos.getX() + 0.5, 
                    spawnPos.getY() + 1.5,  // Changed from +1 to +1.5 so they don't suffocate
                    spawnPos.getZ() + 0.5, 
                    0f, 0f);
            }
            
            // Sync progress data
            syncInitialData(player);
        }
    }

    @SubscribeEvent
    public static void onPlayerChangedDimension(PlayerEvent.PlayerChangedDimensionEvent event) {
        if (event.getEntity() instanceof ServerPlayer player) {
            ServerLevel level = player.serverLevel();
            
            // If player just entered the One Block dimension
            if (level.dimension().equals(ONEBLOCK_DIM)) {
                // Get or create their spawn position
                BlockPos spawnPos = GameModeManager.getPlayerBlockPosition(player);
                
                // In competitive mode, create their island if it doesn't exist
                if (Config.isCompetitiveMode()) {
                    if (level.getBlockState(spawnPos).isAir()) {
                        GameModeManager.createPlayerIsland(level, spawnPos);
                    }
                }
                
                // Teleport player to their spawn position
                player.teleportTo(level, 
                    spawnPos.getX() + 0.5, 
                    spawnPos.getY() + 1.5, 
                    spawnPos.getZ() + 0.5, 
                    0f, 0f);
            }
            
            // Sync progress data
            syncInitialData(player);
        }
    }

    private static void syncInitialData(Player player) {
        if (player instanceof ServerPlayer serverPlayer) {
            if (player.level().dimension().equals(ONEBLOCK_DIM)) {
                PhaseManager phaseManager = AbsoluteOneBlock.phaseManager;
                Phase currentPhase = phaseManager.getCurrentPhase();
                Phase nextPhase = phaseManager.getNextPhase();

                if (currentPhase != null) {
                    int blocksBroken = phaseManager.getProgressData().blocksBroken;
                    int nextPhaseTarget = phaseManager.getNextPhaseBlocksNeeded(); 
                    String currentName = currentPhase.name;
                    String nextName = (nextPhase != null) ? nextPhase.name : "Infinity";
                    
                    PacketHandler.sendToPlayer(
                        new SyncProgressS2CPacket(blocksBroken, nextPhaseTarget, currentName, nextName),
                        serverPlayer
                    );
                }
            }
        }
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/game/ChestData.java ===============

package com.zwcess.absoluteoneblock.game;

public class ChestData {
    public double weight;
    public String loot_table;
    public boolean once = false;

    /**
     * Default constructor used by GSON when loading from phases.json.
     */
    public ChestData() {
    }

    /**
     * Convenience constructor used by the PhaseManager for creating
     * dynamic chests in the Infinity phase.
     * @param weight The spawn weight (can be 0 for this use case).
     * @param loot_table The full ResourceLocation of the loot table.
     * @param once Whether this is a one-time spawn (always false for Infinity).
     */
    public ChestData(double weight, String loot_table, boolean once) {
        this.weight = weight;
        this.loot_table = loot_table;
        this.once = once;
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/game/EndOfPhaseRewards.java ===============

// main.java.com.zwcess.absoluteoneblock.game.EndOfPhaseRewards.java
package com.zwcess.absoluteoneblock.game;

import java.util.List;

// Inner class for the message component
class RewardMessage {
    public String text;
    public String color;
}

public class EndOfPhaseRewards {
    public RewardMessage message;
    public List<String> commands;
    public String loot_table;
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/game/GameModeManager.java ===============

package com.zwcess.absoluteoneblock.game;

import com.zwcess.absoluteoneblock.config.Config;
import net.minecraft.core.BlockPos;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.level.block.Blocks;

import java.util.HashMap;
import java.util.Map;
import java.util.Random;
import java.util.UUID;

public class GameModeManager {
    private static final Random RANDOM = new Random();
    private static final BlockPos COOP_BLOCK_POS = new BlockPos(0, 100, 0);
    
    // Store each player's block position in competitive mode
    private static final Map<UUID, BlockPos> playerBlockPositions = new HashMap<>();
    
    /**
     * Get the One Block position for a player.
     * In coop: everyone gets (0, 100, 0)
     * In competitive: each player gets their own unique position
     */
    public static BlockPos getPlayerBlockPosition(ServerPlayer player) {
        if (!Config.isCompetitiveMode()) {
            return COOP_BLOCK_POS;
        }
        
        // Competitive mode: assign or retrieve player's unique position
        UUID playerId = player.getUUID();
        if (!playerBlockPositions.containsKey(playerId)) {
            BlockPos newPos = generateRandomPosition();
            playerBlockPositions.put(playerId, newPos);
        }
        return playerBlockPositions.get(playerId);
    }
    
    /**
     * Create the starting island for a player in competitive mode
     */
    public static void createPlayerIsland(ServerLevel level, BlockPos center) {
        // Create 3x3 stone platform
        for (int x = -1; x <= 1; x++) {
            for (int z = -1; z <= 1; z++) {
                BlockPos platformPos = center.below().offset(x, 0, z);
                level.setBlock(platformPos, Blocks.STONE.defaultBlockState(), 3);
            }
        }
        
        // Place the One Block
        level.setBlock(center, Blocks.GRASS_BLOCK.defaultBlockState(), 3);
    }
    
    /**
     * Generate a random position around (0, 100, 0) for competitive mode
     */
    private static BlockPos generateRandomPosition() {
        int spacing = Config.getCompetitiveSpacing();
        double angle = RANDOM.nextDouble() * 2 * Math.PI;
        
        int x = (int) (Math.cos(angle) * spacing);
        int z = (int) (Math.sin(angle) * spacing);
        
        return new BlockPos(x, 100, z);
    }
    
    /**
     * Check if a broken block is the correct One Block for this player
     */
    public static boolean isPlayerOneBlock(ServerPlayer player, BlockPos brokenPos) {
        BlockPos playerBlock = getPlayerBlockPosition(player);
        return brokenPos.equals(playerBlock);
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/game/IslandManager.java ===============

package com.zwcess.absoluteoneblock.game;

import net.minecraft.core.BlockPos;
import net.minecraft.server.level.ServerPlayer;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import com.zwcess.absoluteoneblock.config.Config;

public class IslandManager {

    private final ProgressManager progressManager;

    public IslandManager(ProgressManager progressManager) {
        this.progressManager = progressManager;
    }

    /**
     * Gets the player's saved island position or calculates a new one if it doesn't exist.
     * This is the main entry point for finding where a player's island should be.
     *
     * @param player The player whose island position is needed.
     * @return The BlockPos of the player's island.
     */
    public BlockPos getOrCreateIslandPosition(ServerPlayer player) {
        Map<String, List<Integer>> existingIslands = progressManager.getPlayerIslandPositions();
        String playerUUID = player.getUUID().toString();

        // If the player already has a saved island, return its position immediately.
        if (existingIslands.containsKey(playerUUID)) {
            List<Integer> coords = existingIslands.get(playerUUID);
            return new BlockPos(coords.get(0), coords.get(1), coords.get(2));
        }

        // --- If no island exists, calculate a new position ---
        
        // Read the distribution setting from persistent world data.
        boolean useEqualDistribution = Config.isEquallyDistributed();

        BlockPos newPos;
        if (useEqualDistribution) {
            newPos = getEquallyDistributedPosition(existingIslands);
        } else {
            // Fallback to the original sequential placement logic.
            newPos = getSequentialPosition(existingIslands);
        }

        // Save the newly calculated position for the player.
        existingIslands.put(playerUUID, List.of(newPos.getX(), newPos.getY(), newPos.getZ()));
        progressManager.markDirtyAndSave(); // Ensure the new position is saved to the world file.

        return newPos;
    }

    /**
     * Calculates the next position to be as far as possible from all other islands using a circular placement algorithm.
     */
    private BlockPos getEquallyDistributedPosition(Map<String, List<Integer>> existingIslands) {
        List<Double> existingAngles = new ArrayList<>();
        for (List<Integer> coords : existingIslands.values()) {
            // atan2(z, x) gives the angle in radians, which is what we need.
            double angle = Math.atan2(coords.get(2), coords.get(0));
            existingAngles.add(angle);
        }
        Collections.sort(existingAngles);

        double newAngle;
        if (existingAngles.isEmpty()) {
            newAngle = 0.0; // The first player is placed along the positive X-axis (East).
        } else {
            double largestGap = 0;
            double startOfLargestGap = 0;

            // Find the largest gap between consecutive players.
            for (int i = 0; i < existingAngles.size() - 1; i++) {
                double gap = existingAngles.get(i + 1) - existingAngles.get(i);
                if (gap > largestGap) {
                    largestGap = gap;
                    startOfLargestGap = existingAngles.get(i);
                }
            }

            // Check the gap between the last and first player to complete the circle.
            double wrapAroundGap = (2 * Math.PI + existingAngles.get(0)) - existingAngles.get(existingAngles.size() - 1);
            if (wrapAroundGap > largestGap) {
                largestGap = wrapAroundGap;
                startOfLargestGap = existingAngles.get(existingAngles.size() - 1);
            }
            
            // The new position is exactly in the middle of the largest empty space.
            newAngle = startOfLargestGap + (largestGap / 2.0);
        }

        int radius = Config.getCompetitiveSpacing(); // Read from persistent data
        int y = 100;
        int x = (int) Math.round(radius * Math.cos(newAngle));
        int z = (int) Math.round(radius * Math.sin(newAngle));
        return new BlockPos(x, y, z);
    }

    /**
     * Calculates the next island position sequentially along the X-axis.
     */
    private BlockPos getSequentialPosition(Map<String, List<Integer>> existingIslands) {
        int playerCount = existingIslands.size();
        int x = playerCount * Config.getCompetitiveSpacing();
        int y = 100;
        int z = 0; // All islands are placed in a straight line.
        return new BlockPos(x, y, z);
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/game/NextSpawn.java ===============

// main.java.com.zwcess.absoluteoneblock.game.NextSpawn.java
package com.zwcess.absoluteoneblock.game;

import net.minecraft.world.level.block.Block;
import javax.annotation.Nullable;

public class NextSpawn {
    private final Block block;
    private final ChestData chestData;

    private NextSpawn(@Nullable Block block, @Nullable ChestData chestData) {
        this.block = block;
        this.chestData = chestData;
    }

    // Factory methods for clean creation
    public static NextSpawn of(Block block) {
        return new NextSpawn(block, null);
    }

    public static NextSpawn of(ChestData chestData) {
        return new NextSpawn(null, chestData);
    }

    public boolean isChest() {
        return this.chestData != null;
    }

    @Nullable
    public Block getBlock() {
        return block;
    }

    @Nullable
    public ChestData getChestData() {
        return chestData;
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/game/Phase.java ===============

// main.java.com.zwcess.absoluteoneblock.game.Phase.java
package com.zwcess.absoluteoneblock.game;

import java.util.Map;

public class Phase {
    public String name;
    public String description;
    // This is now a map of String to either Double or ChestData
    public Map<String, Object> blocks;
    // Mobs can also have special objects, so we use Object here too
    public Map<String, Object> mobs;
    public double mob_spawn_chance;
    public int blocks_needed;
    public boolean repeatable;
    // Add the new rewards object
    public EndOfPhaseRewards end_of_phase_rewards;
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/game/PhaseConfig.java ===============

// main.java.com.zwcess.absoluteoneblock.game.PhaseConfig.java
package com.zwcess.absoluteoneblock.game;

import java.util.List;

public class PhaseConfig {
    public List<Phase> phases;
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/game/PhaseManager.java ===============

package com.zwcess.absoluteoneblock.game;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonObject;
import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import com.zwcess.absoluteoneblock.config.Config;
import com.zwcess.absoluteoneblock.config.ModConfig;
import com.zwcess.absoluteoneblock.util.AdvancementHelper;

import net.minecraft.ChatFormatting;
import net.minecraft.network.chat.Component;
import net.minecraft.network.chat.MutableComponent;
import net.minecraft.network.chat.Style;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.MinecraftServer;
import net.minecraft.server.level.ServerLevel;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.server.packs.resources.Resource;
import net.minecraft.server.packs.resources.ResourceManager;
import net.minecraft.world.effect.MobEffectInstance;
import net.minecraft.world.effect.MobEffects;
import net.minecraft.world.entity.EntityType;
import net.minecraft.world.entity.MobCategory;
import net.minecraft.world.entity.MobSpawnType;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.level.block.Block;
import net.minecraft.world.level.block.Blocks;
import net.minecraft.world.level.block.RenderShape;
import net.minecraft.world.level.storage.loot.LootParams;
import net.minecraft.world.level.storage.loot.LootTable;
import net.minecraft.world.level.storage.loot.LootDataManager;
import net.minecraft.world.level.storage.loot.LootDataType;
import net.minecraft.world.level.storage.loot.parameters.LootContextParamSets;
import net.minecraft.world.level.storage.loot.parameters.LootContextParams;
import net.minecraftforge.registries.ForgeRegistries;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.io.InputStreamReader;
import java.util.*;

public class PhaseManager {
    private static final Logger LOGGER = LogManager.getLogger();
    private static final ResourceLocation PHASES_LOCATION = new ResourceLocation(AbsoluteOneBlock.MOD_ID, "phases.json");
    private static final Gson GSON = createGson();
    private static final int TRANSITION_WINDOW = 50;

    public static PhaseManager INSTANCE;
    private List<Block> randomOreCache;
    private List<Block> randomLogCache;

    private PhaseConfig config;
    private final Random random = new Random();
    private int lastKnownPhaseIndex = 0;

    private List<Block> infinityBlockCache;
    private List<ResourceLocation> infinityChestCache;
    private List<EntityType<?>> infinityMobCache;

    private ProgressManager progressManager;
    
    // Per-player progress tracking for Competitive Solo mode
    //private final Map<UUID, PlayerPhaseData> playerProgress = new HashMap<>();
    private final Map<UUID, Integer> playerLastKnownPhase = new HashMap<>();

    public PhaseManager() {
        INSTANCE = this;
    }

    private static Gson createGson() {
        return new GsonBuilder()
            .registerTypeAdapter(Phase.class, (JsonDeserializer<Phase>) (json, typeOfT, context) -> {
                JsonObject jsonObject = json.getAsJsonObject();
                Phase phase = new Phase();
                phase.name = jsonObject.has("name") ? jsonObject.get("name").getAsString() : "Unnamed Phase";
                phase.description = jsonObject.has("description") ? jsonObject.get("description").getAsString() : "";
                phase.mob_spawn_chance = jsonObject.has("mob_spawn_chance") ? jsonObject.get("mob_spawn_chance").getAsDouble() : 0.0;
                phase.blocks_needed = jsonObject.has("blocks_needed") ? jsonObject.get("blocks_needed").getAsInt() : 0;
                phase.repeatable = jsonObject.has("repeatable") && jsonObject.get("repeatable").getAsBoolean();
                phase.blocks = new HashMap<>();
                if (jsonObject.has("blocks")) {
                    jsonObject.getAsJsonObject("blocks").entrySet().forEach(entry -> {
                        if (entry.getValue().isJsonPrimitive()) {
                            phase.blocks.put(entry.getKey(), entry.getValue().getAsDouble());
                        } else {
                            phase.blocks.put(entry.getKey(), context.deserialize(entry.getValue(), ChestData.class));
                        }
                    });
                }
                phase.mobs = new HashMap<>();
                if (jsonObject.has("mobs")) {
                    jsonObject.getAsJsonObject("mobs").entrySet().forEach(entry -> {
                        if (entry.getValue().isJsonPrimitive()) {
                            phase.mobs.put(entry.getKey(), entry.getValue().getAsDouble());
                        } else {
                            phase.mobs.put(entry.getKey(), context.deserialize(entry.getValue(), Object.class));
                        }
                    });
                }
                if (jsonObject.has("end_of_phase_rewards")) {
                    phase.end_of_phase_rewards = context.deserialize(jsonObject.get("end_of_phase_rewards"), EndOfPhaseRewards.class);
                }
                return phase;
            }).create();
    }

    public void resetPhase() {
        if (progressManager != null) {
            progressManager.getData().blocksBroken = 0;
            progressManager.getData().spawnedOneTimeChests.clear();
            progressManager.markDirtyAndSave();
            this.lastKnownPhaseIndex = 0;
            LOGGER.info("Absolute One Block progression has been reset.");
        }
    }

    public boolean setPhase(int phaseIndex) {
        if (progressManager != null && config != null && phaseIndex >= 0 && phaseIndex < config.phases.size()) {
            Phase targetPhase = config.phases.get(phaseIndex);
            progressManager.getData().blocksBroken = targetPhase.blocks_needed;
            progressManager.markDirtyAndSave();
            this.lastKnownPhaseIndex = phaseIndex;
            LOGGER.info("Absolute One Block phase set to index: {}", phaseIndex);
            return true;
        }
        return false;
    }

    public void setBlocksNeededForNextPhase(int blocksNeeded) {
        Phase currentPhase = getCurrentPhase();
        if (currentPhase != null) {
            Phase nextPhase = getNextPhase();
            if (nextPhase != null) {
                 nextPhase.blocks_needed = progressManager.getData().blocksBroken + blocksNeeded;
                 LOGGER.info("Blocks needed for next phase transition has been temporarily set to a total of {}", nextPhase.blocks_needed);
            }
        }
    }

    public void load(MinecraftServer server) {
        ResourceManager resourceManager = server.getResourceManager();
        try {
            Resource resource = resourceManager.getResource(PHASES_LOCATION).orElseThrow();
            this.config = GSON.fromJson(new InputStreamReader(resource.open()), PhaseConfig.class);
            LOGGER.info("Successfully loaded {} phases for Absolute One Block.", config.phases.size());
        } catch (Exception e) {
            LOGGER.error("Failed to load One Block phases from JSON. This is a critical error!", e);
        }

        augmentPhasesWithDynamicBlocks();

        ServerLevel overworld = server.overworld();
        this.progressManager = overworld.getDataStorage().computeIfAbsent(ProgressManager::load, ProgressManager::new, ProgressManager.DATA_NAME);

        WorldProgressData worldData = progressManager.getData();
        ModConfig.GameMode currentConfigMode = Config.getGameMode();
        ModConfig.GameMode lastSavedMode = worldData.lastKnownGameMode;

        boolean wasCompetitive = (lastSavedMode == ModConfig.GameMode.COMPETITIVE_SHARED || lastSavedMode == ModConfig.GameMode.COMPETITIVE_SOLO);
        boolean isNowCompetitive = (currentConfigMode == ModConfig.GameMode.COMPETITIVE_SHARED || currentConfigMode == ModConfig.GameMode.COMPETITIVE_SOLO);

        if (wasCompetitive != isNowCompetitive) {
            LOGGER.info("Game mode type has changed from {} to {}. Wiping world progression.", lastSavedMode, currentConfigMode);
            // A switch between COOP and COMPETITIVE occurred. Wipe the world.
            worldData.blocksBroken = 0;
            worldData.spawnedOneTimeChests.clear();
            progressManager.getPlayerIslandPositions().clear();
            progressManager.getPlayerProgressData().clear();
        }

        // After the check, update the "last known mode" to the current one for the next startup.
        worldData.lastKnownGameMode = currentConfigMode;
        progressManager.markDirtyAndSave();

        buildBlockCaches();
        buildInfinityCaches(server);
    }

    private void buildBlockCaches() {
        randomOreCache = new ArrayList<>();
        randomLogCache = new ArrayList<>();

        for (Block block : ForgeRegistries.BLOCKS) {
            ResourceLocation registryName = ForgeRegistries.BLOCKS.getKey(block);
            if (registryName == null) continue;

            String path = registryName.getPath();
            
            // Match blocks ending with "_ore" or containing "_ore_" (e.g., "coal_ore", "deepslate_iron_ore")
            if ((path.endsWith("_ore") || path.contains("_ore_")) && !isBlockInPhase(block, "Mining")) {
                randomOreCache.add(block);
            }
            
            // Match blocks ending with "_log" or containing "_log_" (e.g., "oak_log", "stripped_oak_log")
            // Exclude stripped variants since they're processed logs
            if ((path.endsWith("_log") || path.contains("_log_")) && !path.contains("stripped") && !isBlockInPhase(block, "Exploration")) {
                randomLogCache.add(block);
            }
        }
        
        LOGGER.info("Built random block caches: {} ores, {} logs.", randomOreCache.size(), randomLogCache.size());
    }

    private boolean isBlockInPhase(Block block, String phaseName) {
        if (config == null) return false;
        return config.phases.stream()
            .filter(p -> p.name.equalsIgnoreCase(phaseName))
            .findFirst()
            .map(p -> p.blocks.containsKey(ForgeRegistries.BLOCKS.getKey(block).toString()))
            .orElse(false);
    }

    private void augmentPhasesWithDynamicBlocks() {
        if (config == null || config.phases == null) return;

        LOGGER.info("Augmenting phases with dynamic blocks (ores and logs)...");
        int oresAdded = 0;
        int logsAdded = 0;

        for (Phase phase : config.phases) {
            // Add all blocks ending with "_ore" to the Mining phase
            if (phase.name.equalsIgnoreCase("Mining")) {
                for (Block block : ForgeRegistries.BLOCKS) {
                    ResourceLocation registryName = ForgeRegistries.BLOCKS.getKey(block);
                    if (registryName != null) {
                        String path = registryName.getPath();
                        // Match only blocks ending with "_ore" or containing "_ore_"
                        if (path.endsWith("_ore") || path.contains("_ore_")) {
                            if (phase.blocks.putIfAbsent(registryName.toString(), 1.0) == null) {
                                oresAdded++;
                            }
                        }
                    }
                }
            }
            // Add all blocks ending with "_log" to the Exploration phase
            else if (phase.name.equalsIgnoreCase("Exploration")) {
                for (Block block : ForgeRegistries.BLOCKS) {
                    ResourceLocation registryName = ForgeRegistries.BLOCKS.getKey(block);
                    if (registryName != null) {
                        String path = registryName.getPath();
                        // Match only blocks ending with "_log" or containing "_log_", but not stripped
                        if ((path.endsWith("_log") || path.contains("_log_")) && !path.contains("stripped")) {
                            if (phase.blocks.putIfAbsent(registryName.toString(), 8.0) == null) {
                                logsAdded++;
                            }
                        }
                    }
                }
            }
        }
        LOGGER.info("Dynamically added {} new ores and {} new logs to relevant phases.", oresAdded, logsAdded);
    }

    private void buildInfinityCaches(MinecraftServer server) {
        infinityBlockCache = new ArrayList<>();
        for (Block block : ForgeRegistries.BLOCKS) {
            if (block != null && block != Blocks.AIR && block.defaultBlockState().getRenderShape() != RenderShape.INVISIBLE) {
                infinityBlockCache.add(block);
            }
        }

        infinityChestCache = new ArrayList<>();
        LootDataManager lootDataManager = server.getLootData();
        for (ResourceLocation id : lootDataManager.getKeys(LootDataType.TABLE)) {
            if (id.getPath().contains("chests/")) {
                infinityChestCache.add(id);
            }
        }

        infinityMobCache = new ArrayList<>();
        for (EntityType<?> type : ForgeRegistries.ENTITY_TYPES) {
            if (type.getCategory() != MobCategory.MISC && type != EntityType.ENDER_DRAGON) {
                infinityMobCache.add(type);
            }
        }
        
        LOGGER.info("Infinity Caches Built: {} blocks, {} chest loot tables, {} mobs.",
            infinityBlockCache.size(), infinityChestCache.size(), infinityMobCache.size());
    }

    // NEW: Get phase data for a specific player
    public PlayerPhaseData getPlayerData(ServerPlayer player) {
        if (Config.isCoopMode() || Config.hasSharedProgress()) {
            // For COOP and COMPETITIVE_SHARED, progress is global.
            // We create a temporary "view" of this global progress.
            PlayerPhaseData sharedView = new PlayerPhaseData();
            Phase currentPhase = getCurrentPhase(); // This uses global progress
            int currentIndex = (currentPhase != null) ? config.phases.indexOf(currentPhase) : 0;
            sharedView.setCurrentPhase(currentIndex);
            sharedView.setBlocksBroken(progressManager.getData().blocksBroken);
            // For one-time chests in competitive shared, we use the player's personal set
            if (Config.getGameMode() == ModConfig.GameMode.COMPETITIVE_SHARED) {
                sharedView.setSpawnedOneTimeChests(progressManager.getPlayerProgressData().computeIfAbsent(player.getUUID(), k -> new PlayerPhaseData()).getSpawnedOneTimeChests());
            } else { // COOP mode
                sharedView.setSpawnedOneTimeChests(progressManager.getData().spawnedOneTimeChests);
            }
            return sharedView;
        } else {
            // For COMPETITIVE_SOLO, get the unique, persistent data for this player.
            return progressManager.getPlayerProgressData().computeIfAbsent(player.getUUID(), k -> new PlayerPhaseData());
        }
    }

    // NEW: Get current phase for a specific player
    public Phase getPlayerCurrentPhase(ServerPlayer player) {
        if (Config.hasSharedProgress()) {
            return getCurrentPhase();
        } else {
            PlayerPhaseData data = getPlayerData(player);
            int phaseIndex = Math.min(data.getCurrentPhase(), config.phases.size() - 1);
            return config.phases.get(phaseIndex);
        }
    }

    // NEW: Get next phase for a specific player
    public Phase getPlayerNextPhase(ServerPlayer player) {
        if (Config.hasSharedProgress()) {
            return getNextPhase();
        } else {
            PlayerPhaseData data = getPlayerData(player);
            int nextIndex = data.getCurrentPhase() + 1;
            if (nextIndex < config.phases.size()) {
                return config.phases.get(nextIndex);
            }
            return null;
        }
    }

    public NextSpawn getNextSpawn(ServerPlayer player) {
        if (config == null || config.phases.isEmpty() || progressManager == null) {
            return NextSpawn.of(Blocks.BEDROCK);
        }

        if (Config.hasSharedProgress()) {
            return getNextSpawnShared(player);
        } else {
            return getNextSpawnSolo(player);
        }
    }

    private NextSpawn getNextSpawnShared(ServerPlayer player) {
        WorldProgressData data = progressManager.getData();
        data.blocksBroken++;
        progressManager.markDirtyAndSave();

        Phase previousPhase = config.phases.get(lastKnownPhaseIndex);
        Phase currentPhase = getCurrentPhase();

        if (currentPhase == null) {
            LOGGER.error("Could not determine current phase!");
            return NextSpawn.of(Blocks.STONE);
        }

        int currentPhaseIndex = config.phases.indexOf(currentPhase);
        if (currentPhaseIndex != lastKnownPhaseIndex) {
            if (previousPhase.end_of_phase_rewards != null) {
                executeRewards(player, previousPhase.end_of_phase_rewards);
            }
            player.sendSystemMessage(Component.literal("You have entered the " + currentPhase.name + " Phase!").withStyle(ChatFormatting.GREEN));

            String phaseName = currentPhase.name.toLowerCase().replace(" ", "_");
            AdvancementHelper.grantAdvancement(player, "phases/enter_" + phaseName);

            lastKnownPhaseIndex = currentPhaseIndex;
        }

        return processPhaseLogic(player, currentPhase, getNextPhase(), data.blocksBroken, data);
    }

    private NextSpawn getNextSpawnSolo(ServerPlayer player) {
        UUID playerId = player.getUUID();
        PlayerPhaseData data = getPlayerData(player);
        
        data.incrementBlocks();

        @SuppressWarnings("unused")
        int lastPhaseIndex = playerLastKnownPhase.getOrDefault(playerId, 0);
        Phase currentPhase = config.phases.get(data.getCurrentPhase());
        Phase nextPhase = (data.getCurrentPhase() < config.phases.size() - 1) 
            ? config.phases.get(data.getCurrentPhase() + 1) 
            : null;

        if (!currentPhase.repeatable && nextPhase != null && data.getBlocksBroken() >= currentPhase.blocks_needed) {
            if (currentPhase.end_of_phase_rewards != null) {
                executeRewards(player, currentPhase.end_of_phase_rewards);
            }
            data.setCurrentPhase(data.getCurrentPhase() + 1);
            data.setBlocksBroken(0);
            
            currentPhase = config.phases.get(data.getCurrentPhase());
            player.sendSystemMessage(Component.literal("You have entered the " + currentPhase.name + " Phase!").withStyle(ChatFormatting.GREEN));
            
            String phaseName = currentPhase.name.toLowerCase().replace(" ", "_");
            AdvancementHelper.grantAdvancement(player, "phases/enter_" + phaseName);

            playerLastKnownPhase.put(playerId, data.getCurrentPhase());
        }

        WorldProgressData playerWorldData = new WorldProgressData();
        playerWorldData.blocksBroken = data.getBlocksBroken();
        
        return processPhaseLogic(player, currentPhase, nextPhase, data.getBlocksBroken(), playerWorldData);
    }

    private NextSpawn processPhaseLogic(Player player, Phase currentPhase, Phase nextPhase, int blocksBroken, WorldProgressData worldData) {
        float playerLuck = player.getLuck();
        double unluckyChance = 0.02 - (playerLuck * 0.01);
        if (random.nextDouble() < unluckyChance) {
            return triggerUnluckyEvent(player);
        }

        if (currentPhase.repeatable) {
            if (infinityBlockCache == null) {
                LOGGER.error("Infinity caches have not been built! This should not happen.");
                return NextSpawn.of(Blocks.STONE);
            }
            if (random.nextDouble() < 0.02 && !infinityMobCache.isEmpty()) {
                EntityType<?> randomMob = infinityMobCache.get(random.nextInt(infinityMobCache.size()));
                randomMob.spawn((ServerLevel) player.level(), player.blockPosition().above(2), MobSpawnType.EVENT);
            }
            if (random.nextDouble() < 0.05 && !infinityChestCache.isEmpty()) {
                ResourceLocation randomLoot = infinityChestCache.get(random.nextInt(infinityChestCache.size()));
                return NextSpawn.of(new ChestData(0, randomLoot.toString(), false));
            }
            return NextSpawn.of(infinityBlockCache.get(random.nextInt(infinityBlockCache.size())));
        }

        Map<String, Object> blockProbabilities = new HashMap<>();
        if (nextPhase != null && !nextPhase.repeatable && blocksBroken >= nextPhase.blocks_needed - TRANSITION_WINDOW) {
            double rawProgress = (double)(blocksBroken - (nextPhase.blocks_needed - TRANSITION_WINDOW)) / TRANSITION_WINDOW;
            final double finalTransitionProgress = Math.min(1.0, Math.max(0.0, rawProgress));

            if (currentPhase.blocks != null) {
                currentPhase.blocks.forEach((key, value) -> {
                    blockProbabilities.put(key, getWeight(value) * (1.0 - finalTransitionProgress));
                });
            }
            if (nextPhase.blocks != null) {
                nextPhase.blocks.forEach((key, value) -> {
                    blockProbabilities.merge(key, getWeight(value) * finalTransitionProgress, (a, b) -> (Double)a + (Double)b);
                });
            }
        } else {
            if (currentPhase.blocks != null) {
                blockProbabilities.putAll(currentPhase.blocks);
            }
        }

        // --- FIX: Per-player one-time chest tracking for competitive modes ---
        Set<String> uniqueChestSet;
        if (Config.isCoopMode()) {
            // Shared progress, all players share unique chests
            uniqueChestSet = worldData.spawnedOneTimeChests;
        } else {
            uniqueChestSet = getPlayerData((ServerPlayer) player).getSpawnedOneTimeChests();
        }

        Map<String, Object> finalProbabilities = new HashMap<>();
        for (Map.Entry<String, Object> entry : blockProbabilities.entrySet()) {
            ChestData originalChestData = getOriginalChestData(entry.getKey(), currentPhase, nextPhase);
            if (originalChestData != null && originalChestData.once && uniqueChestSet.contains(entry.getKey())) {
                continue; // Skip this chest if it's "once" and already in the player's (or global) set
            }
            finalProbabilities.put(entry.getKey(), entry.getValue());
        }

        double totalWeight = finalProbabilities.values().stream().mapToDouble(this::getWeight).sum();
        if (totalWeight <= 0) return NextSpawn.of(Blocks.STONE);
        double randomValue = random.nextDouble() * totalWeight;

        for (Map.Entry<String, Object> entry : finalProbabilities.entrySet()) {
            randomValue -= getWeight(entry.getValue());
            if (randomValue <= 0.0) {
                String key = entry.getKey();

                if (key.equals("absoluteoneblock:random_ore")) {
                    if (randomOreCache != null && !randomOreCache.isEmpty()) {
                        Block randomOre = randomOreCache.get(random.nextInt(randomOreCache.size()));
                        return NextSpawn.of(randomOre);
                    } else {
                        return NextSpawn.of(Blocks.COAL_ORE);
                    }
                }

                if (key.equals("absoluteoneblock:random_log")) {
                    if (randomLogCache != null && !randomLogCache.isEmpty()) {
                        Block randomLog = randomLogCache.get(random.nextInt(randomLogCache.size()));
                        return NextSpawn.of(randomLog);
                    } else {
                        return NextSpawn.of(Blocks.OAK_LOG);
                    }
                }

                ChestData originalChestData = getOriginalChestData(entry.getKey(), currentPhase, nextPhase);
                if (originalChestData != null) {
                    if (originalChestData.once) {
                        uniqueChestSet.add(entry.getKey());
                        // Mark the world file as dirty so the new data saves
                        progressManager.markDirtyAndSave();
                    }
                    return NextSpawn.of(originalChestData);
                } else {
                    return NextSpawn.of(ForgeRegistries.BLOCKS.getValue(new ResourceLocation(key)));
                }
            }
        }

        return NextSpawn.of(Blocks.STONE);
    }
    
    private double getWeight(Object value) {
        if (value instanceof Double) return (Double) value;
        if (value instanceof ChestData) return ((ChestData) value).weight;
        return 0.0;
    }

    public ProgressManager getProgressManager() {
        return this.progressManager;
    }

    private ChestData getOriginalChestData(String key, Phase current, Phase next) {
        if (next != null && next.blocks != null && next.blocks.get(key) instanceof ChestData) {
            return (ChestData) next.blocks.get(key);
        }
        if (current != null && current.blocks != null && current.blocks.get(key) instanceof ChestData) {
            return (ChestData) current.blocks.get(key);
        }
        return null;
    }

    private NextSpawn triggerUnluckyEvent(Player player) {
        int outcome = random.nextInt(3);
        ServerLevel level = (ServerLevel) player.level();
        switch (outcome) {
            case 0:
                EntityType.SILVERFISH.spawn(level, player.blockPosition().above(), MobSpawnType.EVENT);
                return NextSpawn.of(Blocks.INFESTED_STONE);
            case 1:
                player.addEffect(new MobEffectInstance(MobEffects.DIG_SLOWDOWN, 200, 0));
                return NextSpawn.of(Blocks.SOUL_SAND);
            default:
                return NextSpawn.of(Blocks.GRAVEL);
        }
    }

    public Phase getCurrentPhase() {
        if (config == null || config.phases.isEmpty()) return null;
        for (int i = config.phases.size() - 1; i >= 0; i--) {
            Phase phase = config.phases.get(i);
            if (progressManager.getData().blocksBroken >= phase.blocks_needed) {
                return phase;
            }
        }
        return config.phases.get(0);
    }

    public Phase getNextPhase() {
        if (config == null || config.phases.isEmpty()) return null;
        Phase current = getCurrentPhase();
        if (current == null) return null;
        int index = config.phases.indexOf(current);
        if (index + 1 < config.phases.size()) {
            return config.phases.get(index + 1);
        }
        return null;
    }

    public int getNextPhaseBlocksNeeded() {
        Phase nextPhase = getNextPhase();
        if (nextPhase != null && !nextPhase.repeatable) {
            return nextPhase.blocks_needed;
        }
        return 0;
    }
    
    private void executeRewards(Player player, EndOfPhaseRewards rewards) {
        ServerLevel world = (ServerLevel) player.level();
        MinecraftServer server = world.getServer();

        if (rewards.message != null && rewards.message.text != null) {
            MutableComponent message = Component.literal(rewards.message.text);
            if (rewards.message.color != null) {
                ChatFormatting color = ChatFormatting.getByName(rewards.message.color.toUpperCase());
                if (color != null) message.withStyle(Style.EMPTY.withColor(color));
            }
            player.sendSystemMessage(message);
        }

        if (rewards.commands != null) {
            for (String command : rewards.commands) {
                String parsedCommand = command.replace("@p", player.getGameProfile().getName());
                server.getCommands().performPrefixedCommand(server.createCommandSourceStack(), parsedCommand);
            }
        }

        if (rewards.loot_table != null) {
            LootTable lootTable = server.getLootData().getLootTable(new ResourceLocation(AbsoluteOneBlock.MOD_ID, "rewards/" + rewards.loot_table));
            LootParams lootParams = new LootParams.Builder(world)
                .withParameter(LootContextParams.THIS_ENTITY, player)
                .withParameter(LootContextParams.ORIGIN, player.position())
                .create(LootContextParamSets.GIFT);
            lootTable.getRandomItems(lootParams).forEach(player::addItem);
        }
    }

    public WorldProgressData getProgressData() {
        return this.progressManager.getData();
    }

    public List<Phase> getPhases() {
        return config != null ? config.phases : new ArrayList<>();
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/game/PlayerPhaseData.java ===============

package com.zwcess.absoluteoneblock.game;

import net.minecraft.nbt.CompoundTag;
import net.minecraft.nbt.ListTag;
import net.minecraft.nbt.StringTag;

import java.util.HashSet;
import java.util.Set;
import java.util.stream.Collectors;

public class PlayerPhaseData {
    private int currentPhase;
    private int blocksBroken;
    private Set<String> spawnedOneTimeChests;

    public PlayerPhaseData() {
        this.currentPhase = 0;
        this.blocksBroken = 0;
        this.spawnedOneTimeChests = new HashSet<>();
    }

    public int getCurrentPhase() { return currentPhase; }
    public void setCurrentPhase(int phase) { this.currentPhase = phase; }
    
    public int getBlocksBroken() { return blocksBroken; }
    public void setBlocksBroken(int blocks) { this.blocksBroken = blocks; }
    public void incrementBlocks() { this.blocksBroken++; }

    public Set<String> getSpawnedOneTimeChests() {
        return spawnedOneTimeChests;
    }

    public void setSpawnedOneTimeChests(Set<String> chests) {
        this.spawnedOneTimeChests = chests;
    }

    public CompoundTag save() {
        CompoundTag tag = new CompoundTag();
        tag.putInt("Phase", currentPhase);
        tag.putInt("Blocks", blocksBroken);

        // Save spawned one-time chests as a string list
        ListTag listTag = new ListTag();
        for (String key : spawnedOneTimeChests) {
            listTag.add(StringTag.valueOf(key));
        }
        tag.put("SpawnedOneTimeChests", listTag);
        return tag;
    }

    public static PlayerPhaseData load(CompoundTag tag) {
        PlayerPhaseData data = new PlayerPhaseData();
        data.currentPhase = tag.getInt("Phase");
        data.blocksBroken = tag.getInt("Blocks");

        Set<String> chests = new HashSet<>();
        if (tag.contains("SpawnedOneTimeChests")) {
            ListTag listTag = tag.getList("SpawnedOneTimeChests", 8); // 8 = String
            chests = listTag.stream()
                    .map(nbt -> nbt.getAsString())
                    .collect(Collectors.toSet());
        }
        data.setSpawnedOneTimeChests(chests);
        return data;
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/game/ProgressManager.java ===============

package com.zwcess.absoluteoneblock.game;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import com.zwcess.absoluteoneblock.config.Config;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.world.level.saveddata.SavedData;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.UUID;

public class ProgressManager extends SavedData {
    private static final Logger LOGGER = LogManager.getLogger();
    public static final String DATA_NAME = "absoluteoneblock_progress";
    private WorldProgressData progressData = new WorldProgressData();
    private Map<UUID, PlayerPhaseData> playerProgressData = new HashMap<>();
    private Map<String, List<Integer>> playerIslandPositions = new HashMap<>();

    // Use a single GSON instance
    private static final Gson GSON = new GsonBuilder().create();

    public static ProgressManager load(CompoundTag nbt) {
        ProgressManager manager = new ProgressManager();
        if (nbt.contains("oneblock_data_json")) {
            String json = nbt.getString("oneblock_data_json");
            manager.progressData = GSON.fromJson(json, WorldProgressData.class);
        }

        // Conditionally load player data only if it exists
        if (nbt.contains("player_progress_json")) {
            String playerJson = nbt.getString("player_progress_json");
            Type type = new TypeToken<Map<UUID, PlayerPhaseData>>(){}.getType();
            manager.playerProgressData = GSON.fromJson(playerJson, type);
        }
        
        // Ensure maps are never null after loading
        if (manager.playerProgressData == null) {
            manager.playerProgressData = new HashMap<>();
        }
        if (manager.progressData.spawnedOneTimeChests == null) {
            manager.progressData.spawnedOneTimeChests = new HashSet<>();
        }

        if (nbt.contains("island_positions_json")) {
            Type type = new TypeToken<Map<String, List<Integer>>>(){}.getType();
            manager.playerIslandPositions = GSON.fromJson(nbt.getString("island_positions_json"), type);
        }
        if (manager.playerIslandPositions == null) {
            manager.playerIslandPositions = new HashMap<>();
        }

        return manager;
    }

    @Override
    public CompoundTag save(CompoundTag nbt) {
        // Save global progress
        nbt.putString("oneblock_data_json", GSON.toJson(this.progressData));

        // Always save island positions, as they are needed for competitive mode
        nbt.putString("island_positions_json", GSON.toJson(this.playerIslandPositions));

        // Only save the per-player data map if in a competitive mode
        if (Config.isCompetitiveMode()) {
            String playerJson = GSON.toJson(this.playerProgressData);
            nbt.putString("player_progress_json", playerJson);
            LOGGER.debug("Saved per-player progress for competitive mode.");
        } else {
            // If not in competitive mode, remove old player data to prevent conflicts
            if (nbt.contains("player_progress_json")) {
                nbt.remove("player_progress_json");
                LOGGER.debug("Removed old per-player progress data after switching to coop mode.");
            }
        }

        LOGGER.debug("Saved One Block world progress.");
        return nbt;
    }

    public Map<String, List<Integer>> getPlayerIslandPositions() {
        return this.playerIslandPositions;
    }

    public WorldProgressData getData() {
        return this.progressData;
    }

    // Add a getter for PhaseManager to access the player data map
    public Map<UUID, PlayerPhaseData> getPlayerProgressData() {
        return this.playerProgressData;
    }

    public void markDirtyAndSave() {
        setDirty();
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/game/WorldProgressData.java ===============

package com.zwcess.absoluteoneblock.game;

import java.util.HashSet;
import java.util.Set;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.zwcess.absoluteoneblock.config.ModConfig;

public class WorldProgressData {
    public transient static final Gson GSON = new GsonBuilder().setPrettyPrinting().create();

    public int blocksBroken = 0;
    public Set<String> spawnedOneTimeChests = new HashSet<>();

    public boolean isGameInProgress = false; 
    public ModConfig.GameMode lastKnownGameMode = ModConfig.GameMode.COOP;
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/item/HeartOfTheVoidItem.java ===============

package com.zwcess.absoluteoneblock.item;

import java.util.List;

import javax.annotation.Nullable;

import net.minecraft.network.chat.Component;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Rarity;
import net.minecraft.world.item.TooltipFlag;
import net.minecraft.world.level.Level;

public class HeartOfTheVoidItem extends Item {

    public HeartOfTheVoidItem(Properties properties) {
        super(properties);
    }

    // This method makes the item always have the enchanted glint effect.
    @Override
    public boolean isFoil(ItemStack stack) {
        return true;
    }

    // This makes the item's name appear in a special color (purple).
    @Override
    public Rarity getRarity(ItemStack stack) {
        return Rarity.EPIC;
    }

    @Override
    public void appendHoverText(ItemStack pStack, @Nullable Level pLevel, List<Component> pTooltipComponents, TooltipFlag pIsAdvanced) {
        // This line adds your custom tooltip from the lang file.
        pTooltipComponents.add(Component.translatable("item.absoluteoneblock.heart_of_the_void.tooltip"));
        
        super.appendHoverText(pStack, pLevel, pTooltipComponents, pIsAdvanced);
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/item/PlatformBuilderToolItem.java ===============

package com.zwcess.absoluteoneblock.item;

import com.zwcess.absoluteoneblock.menu.PlatformBuilderToolMenu;
import net.minecraft.core.BlockPos;
import net.minecraft.nbt.CompoundTag;
import net.minecraft.network.chat.Component;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.InteractionHand;
import net.minecraft.world.InteractionResultHolder;
import net.minecraft.world.MenuProvider;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.item.BlockItem;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.Level;
import net.minecraft.world.level.block.state.BlockState;
import net.minecraftforge.common.capabilities.ForgeCapabilities;
import net.minecraftforge.items.IItemHandler;
import net.minecraftforge.network.NetworkHooks;

import javax.annotation.Nullable;

public class PlatformBuilderToolItem extends Item implements MenuProvider {

    // Max total blocks the tool can place in one activation: 64 stacks * 9 slots = 576 blocks
    public static final int MAX_BLOCKS = 64 * 9; // 576
    private static final String NBT_WIDTH = "PlatformWidth";
    private static final String NBT_HEIGHT = "PlatformHeight";

    public PlatformBuilderToolItem(Properties properties) {
        super(properties.stacksTo(1).durability(256));
    }

    // ----------------------------
    // Size getters/setters (public so client input/packets can call them)
    // ----------------------------
    public static int getPlatformWidth(ItemStack stack) {
        CompoundTag tag = stack.getTag();
        return tag != null && tag.contains(NBT_WIDTH) ? Math.max(1, tag.getInt(NBT_WIDTH)) : 3;
    }

    public static int getPlatformHeight(ItemStack stack) {
        CompoundTag tag = stack.getTag();
        return tag != null && tag.contains(NBT_HEIGHT) ? Math.max(1, tag.getInt(NBT_HEIGHT)) : 3;
    }

    // Clamps width/height to be >=1 and area <= MAX_BLOCKS
    public static void setPlatformSize(ItemStack stack, int width, int height) {
        width = Math.max(1, width);
        height = Math.max(1, height);

        // Clamp area to MAX_BLOCKS (preserve aspect if possible by shrinking the larger dimension first)
        long area = (long) width * (long) height;
        if (area > MAX_BLOCKS) {
            // Reduce the larger dimension proportionally
            double scale = Math.sqrt((double) MAX_BLOCKS / (double) area);
            int newWidth = Math.max(1, (int) Math.floor(width * scale));
            int newHeight = Math.max(1, (int) Math.floor(height * scale));

            // In rare cases floor() can still leave area slightly > MAX_BLOCKS due to rounding; enforce strictly
            while ((long) newWidth * (long) newHeight > MAX_BLOCKS) {
                if (newWidth >= newHeight && newWidth > 1) newWidth--;
                else if (newHeight > 1) newHeight--;
                else break;
            }
            width = newWidth;
            height = newHeight;
        }

        CompoundTag tag = stack.getOrCreateTag();
        tag.putInt(NBT_WIDTH, width);
        tag.putInt(NBT_HEIGHT, height);
    }

    // ----------------------------
    // Use behavior
    // ----------------------------
    @Override
    public InteractionResultHolder<ItemStack> use(Level level, Player player, InteractionHand hand) {
        ItemStack stack = player.getItemInHand(hand);

        // Shift + right-click: open the tool inventory GUI (your menu)
        if (player.isShiftKeyDown()) {
            if (!level.isClientSide && player instanceof ServerPlayer serverPlayer) {
                NetworkHooks.openScreen(serverPlayer, this, buf -> buf.writeItem(stack));
            }
            return InteractionResultHolder.sidedSuccess(stack, level.isClientSide());
        }

        // Right-click: place platform
        if (!level.isClientSide && player instanceof ServerPlayer serverPlayer) {
            boolean success = buildPlatform(serverPlayer, stack);
            if (success) {
                stack.hurtAndBreak(1, player, p -> p.broadcastBreakEvent(hand));
                return InteractionResultHolder.success(stack);
            }
        }
        return InteractionResultHolder.fail(stack);
    }

    // ----------------------------
    // Platform placement core
    // ----------------------------
    @SuppressWarnings("null")
    private boolean buildPlatform(ServerPlayer player, ItemStack tool) {
        IItemHandler handler = tool.getCapability(ForgeCapabilities.ITEM_HANDLER).orElse(null);
        if (handler == null) return false;

        final int width = getPlatformWidth(tool);
        final int height = getPlatformHeight(tool);
        final long area = (long) width * (long) height;
        if (area > MAX_BLOCKS) return false; // Safety guard if external code set bad NBT

        final int halfW = width / 2;
        final int halfH = height / 2;

        Level level = player.level();
        BlockPos base = player.blockPosition().below();
        boolean placedAny = false;

        // Iterate rectangular region centered on player (x across, z forward/back)
        for (int dx = -halfW; dx <= halfW; dx++) {
            for (int dz = -halfH; dz <= halfH; dz++) {
                BlockPos target = base.offset(dx, 0, dz);
                if (!level.isEmptyBlock(target)) continue;

                // Find first available block stack in the tool
                for (int slot = 0; slot < handler.getSlots(); slot++) {
                    ItemStack blockStack = handler.getStackInSlot(slot);
                    if (blockStack.isEmpty() || !(blockStack.getItem() instanceof BlockItem blockItem)) continue;

                    BlockState state = blockItem.getBlock().defaultBlockState();
                    // Optional: ensure the block can survive here (avoids placing into invalid states)
                    if (!state.canSurvive(level, target)) continue;

                    level.setBlock(target, state, 3);
                    handler.extractItem(slot, 1, false);
                    placedAny = true;
                    break; // Move to the next target
                }
            }
        }

        return placedAny;
    }

    // ----------------------------
    // MenuProvider for opening the inventory GUI
    // ----------------------------
    @Override
    public Component getDisplayName() {
        return Component.translatable("item.absoluteoneblock.platform_builder");
    }

    @Nullable
    @Override
    public AbstractContainerMenu createMenu(int windowId, Inventory playerInventory, Player player) {
        return new PlatformBuilderToolMenu(windowId, playerInventory, player.getMainHandItem());
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/loot/AddItemModifier.java ===============

package com.zwcess.absoluteoneblock.loot;

import com.google.common.base.Suppliers;
import com.mojang.serialization.Codec;
import com.mojang.serialization.codecs.RecordCodecBuilder;
import it.unimi.dsi.fastutil.objects.ObjectArrayList;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.world.item.Item;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.level.storage.loot.LootContext;
import net.minecraft.world.level.storage.loot.predicates.LootItemCondition;
import net.minecraftforge.common.loot.IGlobalLootModifier;
import net.minecraftforge.common.loot.LootModifier;
import net.minecraftforge.registries.ForgeRegistries;
import org.jetbrains.annotations.NotNull;

import java.util.function.Supplier;

public class AddItemModifier extends LootModifier {
    public static final Supplier<Codec<AddItemModifier>> CODEC = Suppliers.memoize(() ->
        RecordCodecBuilder.create(inst -> codecStart(inst)
            .and(ForgeRegistries.ITEMS.getCodec().fieldOf("item").forGetter(m -> m.item))
            .and(Codec.DOUBLE.fieldOf("chance").forGetter(m -> m.chance))
            .and(Codec.BOOL.optionalFieldOf("chests_only", true).forGetter(m -> m.chestsOnly))
            .apply(inst, AddItemModifier::new))
    );

    private final Item item;
    private final double chance;
    private final boolean chestsOnly;

    public AddItemModifier(LootItemCondition[] conditionsIn, Item item, double chance, boolean chestsOnly) {
        super(conditionsIn);
        this.item = item;
        this.chance = chance;
        this.chestsOnly = chestsOnly;
    }

    @Override
    protected @NotNull ObjectArrayList<ItemStack> doApply(ObjectArrayList<ItemStack> generatedLoot, LootContext context) {
        // Check if we should only affect chests
        if (chestsOnly) {
            ResourceLocation lootTable = context.getQueriedLootTableId();
            if (lootTable == null || !lootTable.getPath().contains("chests/")) {
                return generatedLoot; // Not a chest, skip
            }
        }

        // Check random chance
        if (context.getRandom().nextDouble() > chance) {
            return generatedLoot; // Failed chance roll
        }

        // Check other conditions
        for (LootItemCondition condition : this.conditions) {
            if (!condition.test(context)) {
                return generatedLoot;
            }
        }

        // Add the item
        generatedLoot.add(new ItemStack(this.item));
        return generatedLoot;
    }

    @Override
    public Codec<? extends IGlobalLootModifier> codec() {
        return CODEC.get();
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/menu/PlatformBuilderToolMenu.java ===============

package com.zwcess.absoluteoneblock.menu;

import com.zwcess.absoluteoneblock.core.Registration;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.world.entity.player.Inventory;
import net.minecraft.world.entity.player.Player;
import net.minecraft.world.inventory.AbstractContainerMenu;
import net.minecraft.world.inventory.Slot;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.common.capabilities.ForgeCapabilities;
import net.minecraftforge.items.SlotItemHandler;

public class PlatformBuilderToolMenu extends AbstractContainerMenu {

    private final ItemStack toolStack;

    // Client-side ctor (from network buffer)
    public PlatformBuilderToolMenu(int windowId, Inventory playerInventory, FriendlyByteBuf extraData) {
        this(windowId, playerInventory, playerInventory.player.getMainHandItem());
    }

    // Server-side ctor (from MenuProvider)
    public PlatformBuilderToolMenu(int windowId, Inventory playerInventory, ItemStack toolStack) {
        super(Registration.PLATFORM_BUILDER_TOOL_MENU.get(), windowId);
        this.toolStack = toolStack;

        // Tool's internal 3x3 inventory
        toolStack.getCapability(ForgeCapabilities.ITEM_HANDLER).ifPresent(handler -> {
            for (int row = 0; row < 3; row++) {
                for (int col = 0; col < 3; col++) {
                    addSlot(new SlotItemHandler(handler, col + row * 3, 62 + col * 18, 17 + row * 18));
                }
            }
        });

        // Player main inventory
        for (int row = 0; row < 3; row++) {
            for (int col = 0; col < 9; col++) {
                addSlot(new Slot(playerInventory, col + row * 9 + 9, 8 + col * 18, 84 + row * 18));
            }
        }

        // Player hotbar
        for (int col = 0; col < 9; col++) {
            addSlot(new Slot(playerInventory, col, 8 + col * 18, 142));
        }
    }

    @Override
    public ItemStack quickMoveStack(Player player, int index) {
        ItemStack returnStack = ItemStack.EMPTY;
        Slot slot = this.slots.get(index);
        if (slot != null && slot.hasItem()) {
            ItemStack current = slot.getItem();
            returnStack = current.copy();

            final int toolInvSize = 9;           // 0..8
            final int playerInvStart = toolInvSize;   // 9..35
            final int hotbarStart = playerInvStart + 27; // 36..44
            final int totalSlots = hotbarStart + 9; // 45

            if (index < toolInvSize) {
                // Move from tool -> player inventory
                if (!moveItemStackTo(current, playerInvStart, totalSlots, true)) {
                    return ItemStack.EMPTY;
                }
            } else {
                // Move from player -> tool
                if (!moveItemStackTo(current, 0, toolInvSize, false)) {
                    return ItemStack.EMPTY;
                }
            }

            if (current.isEmpty()) slot.set(ItemStack.EMPTY);
            else slot.setChanged();
        }
        return returnStack;
    }

    @Override
    public boolean stillValid(Player player) {
        // Close if player no longer holds the tool or is dead/removed
        if (!player.isAlive() || player.isRemoved()) return false;
        ItemStack main = player.getMainHandItem();
        ItemStack off = player.getOffhandItem();
        return main == this.toolStack || off == this.toolStack;
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/network/C2SUpdatePlatformSizePacket.java ===============

package com.zwcess.absoluteoneblock.network;

import com.zwcess.absoluteoneblock.item.PlatformBuilderToolItem;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraft.server.level.ServerPlayer;
import net.minecraft.world.item.ItemStack;
import net.minecraftforge.network.NetworkEvent;

import java.util.function.Supplier;

public class C2SUpdatePlatformSizePacket {
    private final int width;
    private final int height;

    public C2SUpdatePlatformSizePacket(int width, int height) {
        this.width = width;
        this.height = height;
    }

    public static void encode(C2SUpdatePlatformSizePacket msg, FriendlyByteBuf buf) {
        buf.writeInt(msg.width);
        buf.writeInt(msg.height);
    }

    public static C2SUpdatePlatformSizePacket decode(FriendlyByteBuf buf) {
        return new C2SUpdatePlatformSizePacket(buf.readInt(), buf.readInt());
    }

    public static void handle(C2SUpdatePlatformSizePacket msg, Supplier<NetworkEvent.Context> ctx) {
        ctx.get().enqueueWork(() -> {
            ServerPlayer player = ctx.get().getSender();
            if (player == null) return;

            ItemStack stack = player.getMainHandItem();
            if (stack.getItem() instanceof PlatformBuilderToolItem) {
                PlatformBuilderToolItem.setPlatformSize(stack, msg.width, msg.height);
            }
        });
        ctx.get().setPacketHandled(true);
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/network/PacketHandler.java ===============

// main.java.com.zwcess.absoluteoneblock.network.PacketHandler.java
package com.zwcess.absoluteoneblock.network;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;
import net.minecraftforge.network.NetworkDirection;
import net.minecraftforge.network.NetworkRegistry;
import net.minecraftforge.network.PacketDistributor;
import net.minecraftforge.network.simple.SimpleChannel;

public class PacketHandler {
    private static final String PROTOCOL_VERSION = "1";
    public static final SimpleChannel INSTANCE = NetworkRegistry.newSimpleChannel(
            new ResourceLocation(AbsoluteOneBlock.MOD_ID, "main"),
            () -> PROTOCOL_VERSION,
            PROTOCOL_VERSION::equals,
            PROTOCOL_VERSION::equals
    );

    public static void register() {
        int id = 0;
        INSTANCE.messageBuilder(SyncProgressS2CPacket.class, id++, NetworkDirection.PLAY_TO_CLIENT)
                .decoder(SyncProgressS2CPacket::new)
                .encoder(SyncProgressS2CPacket::toBytes)
                .consumerMainThread(SyncProgressS2CPacket::handle)
                .add();
        INSTANCE.registerMessage(id++, C2SUpdatePlatformSizePacket.class, C2SUpdatePlatformSizePacket::encode, C2SUpdatePlatformSizePacket::decode, C2SUpdatePlatformSizePacket::handle);
    }

    public static <MSG> void sendToPlayer(MSG message, ServerPlayer player) {
        INSTANCE.send(PacketDistributor.PLAYER.with(() -> player), message);
    }

    public static <MSG> void sendToServer(MSG message) {
        INSTANCE.sendToServer(message);
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/network/SyncProgressS2CPacket.java ===============

package com.zwcess.absoluteoneblock.network;

import com.zwcess.absoluteoneblock.client.ClientOneBlockData;
import net.minecraft.network.FriendlyByteBuf;
import net.minecraftforge.network.NetworkEvent;
import java.util.function.Supplier;

public class SyncProgressS2CPacket {
    private final int blocksBroken;
    private final int blocksNeeded;
    private final String currentPhaseName;
    private final String nextPhaseName;

    public SyncProgressS2CPacket(int blocksBroken, int blocksNeeded, String currentPhaseName, String nextPhaseName) {
        this.blocksBroken = blocksBroken;
        this.blocksNeeded = blocksNeeded;
        this.currentPhaseName = currentPhaseName;
        this.nextPhaseName = nextPhaseName;
    }

    public SyncProgressS2CPacket(FriendlyByteBuf buf) {
        this.blocksBroken = buf.readInt();
        this.blocksNeeded = buf.readInt();
        this.currentPhaseName = buf.readUtf();
        this.nextPhaseName = buf.readUtf();
    }

    public void toBytes(FriendlyByteBuf buf) {
        buf.writeInt(blocksBroken);
        buf.writeInt(blocksNeeded);
        buf.writeUtf(currentPhaseName);
        buf.writeUtf(nextPhaseName);
    }

    public boolean handle(Supplier<NetworkEvent.Context> supplier) {
        NetworkEvent.Context context = supplier.get();
        context.enqueueWork(() -> {
            ClientOneBlockData.set(this.blocksBroken, this.blocksNeeded, this.currentPhaseName, this.nextPhaseName);
        });
        return true;
    }
}


=============== FILE: src/main/java/com/zwcess/absoluteoneblock/util/AdvancementHelper.java ===============

package com.zwcess.absoluteoneblock.util;

import com.zwcess.absoluteoneblock.AbsoluteOneBlock;
import net.minecraft.advancements.Advancement;
import net.minecraft.resources.ResourceLocation;
import net.minecraft.server.level.ServerPlayer;

public class AdvancementHelper {
    
    public static void grantAdvancement(ServerPlayer player, String advancementPath) {
        ResourceLocation id = ResourceLocation.fromNamespaceAndPath(
            AbsoluteOneBlock.MOD_ID, 
            advancementPath
        );
        
        Advancement advancement = player.server.getAdvancements().getAdvancement(id);
        if (advancement != null) {
            var progress = player.getAdvancements().getOrStartProgress(advancement);
            if (!progress.isDone()) {
                for (String criterion : progress.getRemainingCriteria()) {
                    player.getAdvancements().award(advancement, criterion);
                }
            }
        }
    }
}


=============== FILE: src/main/resources/assets/absoluteoneblock/blockstates/one_block.json ===============

{
  "variants": {
    "": { "model": "absoluteoneblock:block/one_block" }
  }
}


=============== FILE: src/main/resources/assets/absoluteoneblock/lang/en_us.json ===============

{
  "block.absoluteoneblock.one_block": "The One Block",
  "creativetab.absoluteoneblock.one_block_tab": "Absolute One Block",
  "item.absoluteoneblock.heart_of_the_void": "Heart of the Void",
  "item.absoluteoneblock.heart_of_the_void.tooltip": "A fragment of an unknown creator",
  "item.absoluteoneblock.heart_of_the_void.used1": "The hidden spirit has answered your plea",
  "item.absoluteoneblock.heart_of_the_void.used2": "The Void Beings felt pity for you",
  "item.absoluteoneblock.platform_builder": "Platform Builder",
  "item.absoluteoneblock.platform_builder.no_blocks": "No placeable blocks in the tool!",

  "advancements.absoluteoneblock.root.title": "Absolute One Block",
  "advancements.absoluteoneblock.root.description": "Welcome to the ultimate void challenge",
  
  "advancements.absoluteoneblock.phases.enter_surface.title": "Surface Phase",
  "advancements.absoluteoneblock.phases.enter_surface.description": "Begin your journey on the surface",
  "advancements.absoluteoneblock.phases.enter_mining.title": "Mining Phase",
  "advancements.absoluteoneblock.phases.enter_mining.description": "Discover precious ores underground",
  "advancements.absoluteoneblock.phases.enter_exploration.title": "Exploration Phase",
  "advancements.absoluteoneblock.phases.enter_exploration.description": "Venture through diverse biomes",
  "advancements.absoluteoneblock.phases.enter_nether.title": "Nether Phase",
  "advancements.absoluteoneblock.phases.enter_nether.description": "Enter the fiery interdimensional realm",
  "advancements.absoluteoneblock.phases.enter_end.title": "End Phase",
  "advancements.absoluteoneblock.phases.enter_end.description": "Reach the final dimension",
  "advancements.absoluteoneblock.phases.enter_mastery.title": "Mastery Phase",
  "advancements.absoluteoneblock.phases.enter_mastery.description": "Achieve ultimate mastery with the best rewards",
  "advancements.absoluteoneblock.phases.infinity.title": "Infinity",
  "advancements.absoluteoneblock.phases.infinity.description": "Achieve true mastery of the One Block - endless cycle",
  
  "advancements.absoluteoneblock.challenges.first_block.title": "First Step",
  "advancements.absoluteoneblock.challenges.first_block.description": "Break your first One Block",
  "advancements.absoluteoneblock.challenges.hundred_blocks.title": "Getting Started",
  "advancements.absoluteoneblock.challenges.hundred_blocks.description": "Break 100 blocks",
  "advancements.absoluteoneblock.challenges.thousand_blocks.title": "Block Breaker",
  "advancements.absoluteoneblock.challenges.thousand_blocks.description": "Break 1,000 blocks",
  "advancements.absoluteoneblock.challenges.ten_thousand_blocks.title": "Dedicated Miner",
  "advancements.absoluteoneblock.challenges.ten_thousand_blocks.description": "Break 10,000 blocks",
  "advancements.absoluteoneblock.challenges.survived_void.title": "Void Walker",
  "advancements.absoluteoneblock.challenges.survived_void.description": "Survive falling into the void using the Heart of the Void",
  "advancements.absoluteoneblock.challenges.no_death.title": "Flawless Victory",
  "advancements.absoluteoneblock.challenges.no_death.description": "Reach the End Phase without dying",
  "advancements.absoluteoneblock.challenges.speed_run.title": "Speed Runner",
  "advancements.absoluteoneblock.challenges.speed_run.description": "Complete all phases in under 4 hours",
  
  "advancements.absoluteoneblock.collection.heart_of_the_void.title": "Heart of the Void",
  "advancements.absoluteoneblock.collection.heart_of_the_void.description": "Obtain the legendary Heart of the Void",
  "advancements.absoluteoneblock.collection.platform_tool.title": "Platform Master",
  "advancements.absoluteoneblock.collection.platform_tool.description": "Craft a Platform Builder Tool",
  "advancements.absoluteoneblock.collection.all_logs.title": "Lumberjack",
  "advancements.absoluteoneblock.collection.all_logs.description": "Collect all types of logs",
  "advancements.absoluteoneblock.collection.all_ores.title": "Ore Collector",
  "advancements.absoluteoneblock.collection.all_ores.description": "Collect all types of ores",
  
  "advancements.absoluteoneblock.combat.kill_warden.title": "Fearless",
  "advancements.absoluteoneblock.combat.kill_warden.description": "Defeat a Warden on your island",
  "advancements.absoluteoneblock.combat.hundred_mobs.title": "Monster Hunter",
  "advancements.absoluteoneblock.combat.hundred_mobs.description": "Kill 100 mobs",
  "advancements.absoluteoneblock.combat.thousand_mobs.title": "Mob Slayer",
  "advancements.absoluteoneblock.combat.thousand_mobs.description": "Kill 1,000 mobs",
  
  "advancements.absoluteoneblock.secrets.unlucky_event.title": "Bad Luck",
  "advancements.absoluteoneblock.secrets.unlucky_event.description": "Trigger an unlucky event",
  "advancements.absoluteoneblock.secrets.one_time_chest.title": "Treasure Hunter",
  "advancements.absoluteoneblock.secrets.one_time_chest.description": "Find a one-time chest",
  
  "commands.oneblock.enter.success": "Teleported to your One Block",
  "commands.oneblock.leave.success": "Teleported to Overworld",
  "commands.oneblock.reset.success": "One Block phase has been reset to the beginning",
  "commands.oneblock.setphase.success": "Successfully set One Block phase to %s",
  "commands.oneblock.setphase.invalid": "Invalid phase index",
  "commands.oneblock.setblocks.success": "Blocks needed for next phase set to %s",
  "commands.oneblock.fix.success": "Your One Block has been fixed to Dirt",
  "commands.oneblock.mode.coop": "Game mode set to COOP (shared block, shared progress)",
  "commands.oneblock.mode.competitive": "Game mode set to COMPETITIVE SHARED (own islands, shared progress)",
  "commands.oneblock.mode.solo": "Game mode set to COMPETITIVE SOLO (own islands, own progress)",
  "commands.oneblock.dimension_not_found": "Dimension not found!",
  "commands.oneblock.overworld_not_found": "Overworld not found!"
}


=============== FILE: src/main/resources/assets/absoluteoneblock/lang/pt_pt.json ===============

{
  "block.absoluteoneblock.one_block": "O One Block",
  "creativetab.absoluteoneblock.one_block_tab": "Absolute One Block",
  "item.absoluteoneblock.heart_of_the_void": "CoraÃ§Ã£o do Void",
  "item.absoluteoneblock.heart_of_the_void.tooltip": "Um fragmento de um criador desconhecido",
  "item.absoluteoneblock.heart_of_the_void.used1": "O espÃ­rito oculto respondeu Ã  tua sÃºplica",
  "item.absoluteoneblock.heart_of_the_void.used2": "Os Seres do Void tiveram piedade de ti",
  "item.absoluteoneblock.platform_builder": "Construtor de Plataforma",
  "item.absoluteoneblock.platform_builder.no_blocks": "Sem blocos vÃ¡lidos na ferramenta!",

  "advancements.absoluteoneblock.root.title": "Absolute One Block",
  "advancements.absoluteoneblock.root.description": "Bem-vindo ao desafio supremo do Void",
  
  "advancements.absoluteoneblock.phases.enter_surface.title": "Fase da SuperfÃ­cie",
  "advancements.absoluteoneblock.phases.enter_surface.description": "ComeÃ§a a tua jornada na superfÃ­cie",
  "advancements.absoluteoneblock.phases.enter_mining.title": "Fase da MineraÃ§Ã£o",
  "advancements.absoluteoneblock.phases.enter_mining.description": "Descobre minÃ©rios preciosos no subsolo",
  "advancements.absoluteoneblock.phases.enter_exploration.title": "Fase de ExploraÃ§Ã£o",
  "advancements.absoluteoneblock.phases.enter_exploration.description": "Aventura-te por biomas diversos",
  "advancements.absoluteoneblock.phases.enter_nether.title": "Fase do Nether",
  "advancements.absoluteoneblock.phases.enter_nether.description": "Entra no reino interdimensional ardente",
  "advancements.absoluteoneblock.phases.enter_end.title": "Fase do End",
  "advancements.absoluteoneblock.phases.enter_end.description": "AlcanÃ§a a dimensÃ£o final",
  "advancements.absoluteoneblock.phases.enter_mastery.title": "Fase da Mestria",
  "advancements.absoluteoneblock.phases.enter_mastery.description": "AlcanÃ§a a mestria suprema com as melhores recompensas",
  "advancements.absoluteoneblock.phases.infinity.title": "Infinito",
  "advancements.absoluteoneblock.phases.infinity.description": "AlcanÃ§a a verdadeira mestria do One Block - ciclo infinito",
  
  "advancements.absoluteoneblock.challenges.first_block.title": "Primeiro Passo",
  "advancements.absoluteoneblock.challenges.first_block.description": "Quebra o teu primeiro One Block",
  "advancements.absoluteoneblock.challenges.hundred_blocks.title": "A ComeÃ§ar",
  "advancements.absoluteoneblock.challenges.hundred_blocks.description": "Quebra 100 blocos",
  "advancements.absoluteoneblock.challenges.thousand_blocks.title": "Quebra-Blocos",
  "advancements.absoluteoneblock.challenges.thousand_blocks.description": "Quebra 1.000 blocos",
  "advancements.absoluteoneblock.challenges.ten_thousand_blocks.title": "Mineiro Dedicado",
  "advancements.absoluteoneblock.challenges.ten_thousand_blocks.description": "Quebra 10.000 blocos",
  "advancements.absoluteoneblock.challenges.survived_void.title": "Caminhante do Void",
  "advancements.absoluteoneblock.challenges.survived_void.description": "Sobrevive ao Void usando um CoraÃ§Ã£o do Void",
  "advancements.absoluteoneblock.challenges.no_death.title": "VitÃ³ria ImpecÃ¡vel",
  "advancements.absoluteoneblock.challenges.no_death.description": "AlcanÃ§a a Fase do End sem morrer",
  "advancements.absoluteoneblock.challenges.speed_run.title": "Corredor Veloz",
  "advancements.absoluteoneblock.challenges.speed_run.description": "Completa todas as fases em menos de 4 horas",
  
  "advancements.absoluteoneblock.collection.heart_of_the_void.title": "CoraÃ§Ã£o do Void",
  "advancements.absoluteoneblock.collection.heart_of_the_void.description": "ObtÃ©m o lendÃ¡rio CoraÃ§Ã£o do Void",
  "advancements.absoluteoneblock.collection.platform_tool.title": "Mestre das Plataformas",
  "advancements.absoluteoneblock.collection.platform_tool.description": "Fabrica um Construtor de Plataforma",
  "advancements.absoluteoneblock.collection.all_logs.title": "Lenhador",
  "advancements.absoluteoneblock.collection.all_logs.description": "Recolhe todos os tipos de troncos",
  "advancements.absoluteoneblock.collection.all_ores.title": "Colecionador de MinÃ©rios",
  "advancements.absoluteoneblock.collection.all_ores.description": "Recolhe todos os tipos de minÃ©rios",
  
  "advancements.absoluteoneblock.combat.kill_warden.title": "Destemido",
  "advancements.absoluteoneblock.combat.kill_warden.description": "Derrota um Warden na tua ilha",
  "advancements.absoluteoneblock.combat.hundred_mobs.title": "CaÃ§ador de Monstros",
  "advancements.absoluteoneblock.combat.hundred_mobs.description": "Mata 100 criaturas",
  "advancements.absoluteoneblock.combat.thousand_mobs.title": "Exterminador de Criaturas",
  "advancements.absoluteoneblock.combat.thousand_mobs.description": "Mata 1.000 criaturas",
  
  "advancements.absoluteoneblock.secrets.unlucky_event.title": "Azar",
  "advancements.absoluteoneblock.secrets.unlucky_event.description": "Desencadeia um evento de azar",
  "advancements.absoluteoneblock.secrets.one_time_chest.title": "CaÃ§ador de Tesouros",
  "advancements.absoluteoneblock.secrets.one_time_chest.description": "Encontra um baÃº Ãºnico",
  
  "commands.oneblock.enter.success": "Teletransportado para o teu One Block",
  "commands.oneblock.leave.success": "Teletransportado para o Overworld",
  "commands.oneblock.reset.success": "A fase do One Block foi reiniciada para o inÃ­cio",
  "commands.oneblock.setphase.success": "Fase do One Block definida para %s com sucesso",
  "commands.oneblock.setphase.invalid": "Ãndice de fase invÃ¡lido",
  "commands.oneblock.setblocks.success": "Blocos necessÃ¡rios para a prÃ³xima fase definidos para %s",
  "commands.oneblock.fix.success": "O teu One Block foi substituÃ­do por Terra",
  "commands.oneblock.mode.coop": "Modo de jogo definido para COOPERATIVO (bloco partilhado, progresso partilhado)",
  "commands.oneblock.mode.competitive": "Modo de jogo definido para COMPETITIVO PARTILHADO (ilhas prÃ³prias, progresso partilhado)",
  "commands.oneblock.mode.solo": "Modo de jogo definido para COMPETITIVO SOLO (ilhas prÃ³prias, progresso prÃ³prio)",
  "commands.oneblock.dimension_not_found": "DimensÃ£o nÃ£o encontrada!",
  "commands.oneblock.overworld_not_found": "Overworld nÃ£o encontrado!"
}


=============== FILE: src/main/resources/assets/absoluteoneblock/models/block/one_block.json ===============

{
  "parent": "block/cube_all",
  "textures": {
    "all": "absoluteoneblock:block/one_block"
  }
}


=============== FILE: src/main/resources/assets/absoluteoneblock/models/item/heart_of_the_void.json ===============

{
  "parent": "minecraft:item/generated",
  "textures": {
    "layer0": "absoluteoneblock:item/heart_of_the_void"
  }
}


=============== FILE: src/main/resources/assets/absoluteoneblock/models/item/one_block.json ===============

{
  "parent": "absoluteoneblock:block/one_block"
}


=============== FILE: src/main/resources/assets/absoluteoneblock/models/item/platform_builder_tool.json ===============

{
  "parent": "minecraft:item/generated",
  "textures": {
    "layer0": "absoluteoneblock:item/platform_builder_tool"
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/phases.json ===============

{
  "phases": [
    {
      "name": "Surface",
      "description": "Basic survival - wood, stone, food",
      "blocks": {
        "minecraft:dirt": 25, "minecraft:grass_block": 20, "minecraft:stone": 15, "minecraft:cobblestone": 10,
        "minecraft:oak_log": 12, "minecraft:oak_leaves": 8, "minecraft:sand": 8, "minecraft:gravel": 6,
        "minecraft:clay": 4, "minecraft:coal_ore": 5, "minecraft:iron_ore": 2,
        "minecraft:chest": { "weight": 3, "loot_table": "minecraft:chests/village/village_plains_house" },
        "absoluteoneblock:starter_chest": { "weight": 5, "loot_table": "absoluteoneblock:chests/starting_treasure", "once": true }
      },
      "mobs": {
        "minecraft:cow": 8, "minecraft:pig": 7, "minecraft:sheep": 8, "minecraft:chicken": 6,
        "minecraft:zombie": 2, "minecraft:skeleton": 2, "minecraft:creeper": 1
      },
      "mob_spawn_chance": 0.04,
      "blocks_needed": 0,
      "end_of_phase_rewards": {
        "message": {"text": "You feel the ground beneath you rumble. Time to start mining!", "color": "yellow"},
        "commands": ["/give @p minecraft:stone_pickaxe 1", "/give @p minecraft:bread 8"]
      }
    },
    {
      "name": "Mining",
      "description": "Underground resources and ores",
      "blocks": {
        "minecraft:stone": 20, "minecraft:deepslate": 12, "minecraft:coal_ore": 10, "minecraft:iron_ore": 8,
        "minecraft:copper_ore": 6, "minecraft:gold_ore": 3, "minecraft:diamond_ore": 1.5, "minecraft:lapis_ore": 3,
        "minecraft:redstone_ore": 4, "minecraft:emerald_ore": 0.8, "minecraft:granite": 5, "minecraft:diorite": 5,
        "minecraft:chest": { "weight": 4, "loot_table": "minecraft:chests/abandoned_mineshaft" },
        "absoluteoneblock:random_ore": 5
      },
      "mobs": { "minecraft:zombie": 6, "minecraft:skeleton": 6, "minecraft:creeper": 4, "minecraft:spider": 5 },
      "mob_spawn_chance": 0.06,
      "blocks_needed": 500,
      "end_of_phase_rewards": {
        "message": {"text": "You've mastered the caves. The world outside calls to you.", "color": "aqua"},
        "loot_table": "mining_gear"
      }
    },
    {
      "name": "Exploration",
      "description": "Diverse materials from different biomes",
      "blocks": {
        "minecraft:oak_log": 8, "minecraft:spruce_log": 8, "minecraft:jungle_log": 8, "minecraft:sand": 15,
        "minecraft:terracotta": 6, "minecraft:snow_block": 10, "minecraft:ice": 8, "minecraft:clay": 8,
        "minecraft:mud": 6, "minecraft:slime_block": 2,
        "absoluteoneblock:jungle_chest": { "weight": 1, "loot_table": "minecraft:chests/jungle_temple" },
        "absoluteoneblock:desert_chest": { "weight": 1, "loot_table": "minecraft:chests/desert_pyramid" },
        "absoluteoneblock:random_log": 6
      },
      "mobs": { "minecraft:rabbit": 4, "minecraft:fox": 3, "minecraft:polar_bear": 2, "minecraft:witch": 2 },
      "mob_spawn_chance": 0.05,
      "blocks_needed": 1500,
      "end_of_phase_rewards": {
        "message": {"text": "An ancient power awakens...", "color": "dark_purple"},
        "commands": ["/give @p minecraft:diamond_pickaxe 1", "/give @p minecraft:ender_pearl 4"]
      }
    },
    {
      "name": "Nether",
      "description": "Interdimensional travel and nether resources",
      "blocks": {
        "minecraft:netherrack": 20, "minecraft:blackstone": 8, "minecraft:basalt": 10, "minecraft:soul_sand": 8,
        "minecraft:nether_quartz_ore": 8, "minecraft:nether_gold_ore": 6, "minecraft:glowstone": 4,
        "absoluteoneblock:fortress_chest": { "weight": 2, "loot_table": "minecraft:chests/nether_bridge" },
        "absoluteoneblock:bastion_chest": { "weight": 1, "loot_table": "minecraft:chests/bastion_treasure" }
      },
      "mobs": { "minecraft:zombified_piglin": 8, "minecraft:piglin": 6, "minecraft:blaze": 5, "minecraft:wither_skeleton": 4 },
      "mob_spawn_chance": 0.6,
      "blocks_needed": 3000,
      "end_of_phase_rewards": {
        "message": {"text": "You have conquered the Nether. The final dimension calls.", "color": "red"},
        "commands": ["/give @p minecraft:wither_skeleton_skull 1", "/give @p minecraft:netherite_upgrade_smithing_template 1"]
      }
    },
    {
      "name": "End",
      "description": "The final dimension",
      "blocks": {
        "minecraft:end_stone": 25, "minecraft:purpur_block": 10, "minecraft:end_rod": 6, "minecraft:obsidian": 8,
        "minecraft:shulker_box": 3,
        "minecraft:chest": { "weight": 3, "loot_table": "minecraft:chests/end_city_treasure" },
        "absoluteoneblock:random_ore": 5,
        "absoluteoneblock:random_log": 5
      },
      "mobs": { "minecraft:enderman": 12, "minecraft:shulker": 6, "absoluteoneblock:warden_spawn": {"weight": 0.02} },
      "mob_spawn_chance": 0.08,
      "blocks_needed": 5000,
      "end_of_phase_rewards": {
        "message": {"text": "VICTORY! The End is yours. True mastery awaits.", "color": "gold"},
        "loot_table": "end_completion"
      }
    },
    {
      "name": "Mastery",
      "description": "Ultimate rewards - best of everything",
      "blocks": {
        "minecraft:diamond_block": 5, "minecraft:emerald_block": 4, "minecraft:netherite_block": 2,
        "minecraft:gold_block": 6, "minecraft:iron_block": 8, "minecraft:beacon": 1, "minecraft:conduit": 1,
        "minecraft:chest": { "weight": 1, "loot_table": "absoluteoneblock:chests/mastery_treasure"}
      },
      "mobs": { "minecraft:villager": 8, "minecraft:iron_golem": 3, "absoluteoneblock:warden_spawn": {"weight": 0.02} },
      "mob_spawn_chance": 0.02,
      "blocks_needed": 8000,
      "end_of_phase_rewards": {
        "message": {"text": "You have achieved true mastery. The world is yours to command.", "color": "light_purple"},
        "loot_table": "mastery_gear"
      }
    },
    {
      "name": "Infinity",
      "description": "Endless cycle with all resources",
      "blocks_needed": 10000,
      "repeatable": true
    }
  ]
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/root.json ===============

{
  "display": {
    "icon": {
      "item": "absoluteoneblock:one_block"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.root.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.root.description"
    },
    "background": "minecraft:textures/block/grass_block.png",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "enter_dimension": {
      "trigger": "minecraft:changed_dimension",
      "conditions": {
        "to": "absoluteoneblock:oneblock_dimension"
      }
    }
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/challenges/first_block.json ===============

{
  "parent": "absoluteoneblock:root",
  "display": {
    "icon": {
      "item": "minecraft:dirt"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.challenges.first_block.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.challenges.first_block.description"
    },
    "frame": "task",
    "show_toast": true,
    "announce_to_chat": false,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/challenges/hundred_blocks.json ===============

{
  "parent": "absoluteoneblock:challenges/first_block",
  "display": {
    "icon": {
      "item": "minecraft:stone_pickaxe"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.challenges.hundred_blocks.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.challenges.hundred_blocks.description"
    },
    "frame": "task",
    "show_toast": true,
    "announce_to_chat": false,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/challenges/no_death.json ===============

{
  "parent": "absoluteoneblock:root",
  "display": {
    "icon": {
      "item": "minecraft:totem_of_undying"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.challenges.no_death.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.challenges.no_death.description"
    },
    "frame": "challenge",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  },
  "rewards": {
    "experience": 1000
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/challenges/speed_run.json ===============

{
  "parent": "absoluteoneblock:root",
  "display": {
    "icon": {
      "item": "minecraft:clock"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.challenges.speed_run.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.challenges.speed_run.description"
    },
    "frame": "challenge",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  },
  "rewards": {
    "experience": 2000
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/challenges/survived_void.json ===============

{
  "parent": "absoluteoneblock:root",
  "display": {
    "icon": {
      "item": "absoluteoneblock:heart_of_the_void"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.challenges.survived_void.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.challenges.survived_void.description"
    },
    "frame": "goal",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  },
  "rewards": {
    "experience": 100
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/challenges/ten_thousand_blocks.json ===============

{
  "parent": "absoluteoneblock:challenges/thousand_blocks",
  "display": {
    "icon": {
      "item": "minecraft:diamond_pickaxe"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.challenges.ten_thousand_blocks.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.challenges.ten_thousand_blocks.description"
    },
    "frame": "challenge",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  },
  "rewards": {
    "experience": 500
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/challenges/thousand_blocks.json ===============

{
  "parent": "absoluteoneblock:challenges/hundred_blocks",
  "display": {
    "icon": {
      "item": "minecraft:iron_pickaxe"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.challenges.thousand_blocks.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.challenges.thousand_blocks.description"
    },
    "frame": "goal",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/collection/all_logs.json ===============

{
  "parent": "absoluteoneblock:root",
  "display": {
    "icon": {
      "item": "minecraft:oak_log"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.collection.all_logs.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.collection.all_logs.description"
    },
    "frame": "challenge",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "oak_log": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:oak_log"]}]
      }
    },
    "spruce_log": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:spruce_log"]}]
      }
    },
    "birch_log": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:birch_log"]}]
      }
    },
    "jungle_log": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:jungle_log"]}]
      }
    },
    "acacia_log": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:acacia_log"]}]
      }
    },
    "dark_oak_log": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:dark_oak_log"]}]
      }
    },
    "mangrove_log": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:mangrove_log"]}]
      }
    },
    "cherry_log": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:cherry_log"]}]
      }
    },
    "crimson_stem": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:crimson_stem"]}]
      }
    },
    "warped_stem": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:warped_stem"]}]
      }
    }
  },
  "requirements": [
    ["oak_log"],
    ["spruce_log"],
    ["birch_log"],
    ["jungle_log"],
    ["acacia_log"],
    ["dark_oak_log"],
    ["mangrove_log"],
    ["cherry_log"],
    ["crimson_stem"],
    ["warped_stem"]
  ],
  "rewards": {
    "experience": 2000
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/collection/all_ores.json ===============

{
  "parent": "absoluteoneblock:root",
  "display": {
    "icon": {
      "item": "minecraft:diamond_ore"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.collection.all_ores.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.collection.all_ores.description"
    },
    "frame": "challenge",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "coal_ore": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:coal_ore"]}]
      }
    },
    "iron_ore": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:iron_ore"]}]
      }
    },
    "copper_ore": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:copper_ore"]}]
      }
    },
    "gold_ore": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:gold_ore"]}]
      }
    },
    "redstone_ore": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:redstone_ore"]}]
      }
    },
    "emerald_ore": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:emerald_ore"]}]
      }
    },
    "lapis_ore": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:lapis_ore"]}]
      }
    },
    "diamond_ore": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:diamond_ore"]}]
      }
    },
    "nether_quartz_ore": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:nether_quartz_ore"]}]
      }
    },
    "nether_gold_ore": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:nether_gold_ore"]}]
      }
    },
    "ancient_debris": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [{"items": ["minecraft:ancient_debris"]}]
      }
    }
  },
  "requirements": [
    ["coal_ore"],
    ["iron_ore"],
    ["copper_ore"],
    ["gold_ore"],
    ["redstone_ore"],
    ["emerald_ore"],
    ["lapis_ore"],
    ["diamond_ore"],
    ["nether_quartz_ore"],
    ["nether_gold_ore"],
    ["ancient_debris"]
  ],
  "rewards": {
    "experience": 2000
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/collection/heart_of_the_void.json ===============

{
  "parent": "absoluteoneblock:root",
  "display": {
    "icon": {
      "item": "absoluteoneblock:heart_of_the_void"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.collection.heart_of_the_void.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.collection.heart_of_the_void.description"
    },
    "frame": "goal",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "has_heart": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [
          {
            "items": ["absoluteoneblock:heart_of_the_void"]
          }
        ]
      }
    }
  },
  "rewards": {
    "experience": 100
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/collection/platform_tool.json ===============

{
  "parent": "absoluteoneblock:root",
  "display": {
    "icon": {
      "item": "absoluteoneblock:platform_builder"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.collection.platform_tool.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.collection.platform_tool.description"
    },
    "frame": "task",
    "show_toast": true,
    "announce_to_chat": false,
    "hidden": false
  },
  "criteria": {
    "has_platform_tool": {
      "trigger": "minecraft:inventory_changed",
      "conditions": {
        "items": [
          {
            "items": ["absoluteoneblock:platform_builder"]
          }
        ]
      }
    }
  },
  "rewards": {
    "experience": 50
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/phases/enter_end.json ===============

{
  "parent": "absoluteoneblock:phases/enter_nether",
  "display": {
    "icon": {
      "item": "minecraft:end_stone"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.phases.enter_end.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.phases.enter_end.description"
    },
    "frame": "goal",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  },
  "rewards": {
    "experience": 150
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/phases/enter_exploration.json ===============

{
  "parent": "absoluteoneblock:phases/enter_mining",
  "display": {
    "icon": {
      "item": "minecraft:oak_log"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.phases.enter_exploration.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.phases.enter_exploration.description"
    },
    "frame": "task",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  },
  "rewards": {
    "experience": 50
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/phases/enter_mastery.json ===============

{
  "parent": "absoluteoneblock:phases/enter_end",
  "display": {
    "icon": {
      "item": "minecraft:diamond_block"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.phases.enter_mastery.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.phases.enter_mastery.description"
    },
    "frame": "goal",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  },
  "rewards": {
    "experience": 250
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/phases/enter_mining.json ===============

{
  "parent": "absoluteoneblock:phases/enter_surface",
  "display": {
    "icon": {
      "item": "minecraft:iron_ore"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.phases.enter_mining.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.phases.enter_mining.description"
    },
    "frame": "task",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  },
  "rewards": {
    "experience": 30
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/phases/enter_nether.json ===============

{
  "parent": "absoluteoneblock:phases/enter_exploration",
  "display": {
    "icon": {
      "item": "minecraft:netherrack"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.phases.enter_nether.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.phases.enter_nether.description"
    },
    "frame": "goal",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  },
  "rewards": {
    "experience": 100
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/phases/enter_surface.json ===============

{
  "parent": "absoluteoneblock:root",
  "display": {
    "icon": {
      "item": "minecraft:grass_block"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.phases.enter_surface.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.phases.enter_surface.description"
    },
    "frame": "task",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  },
  "rewards": {
    "experience": 10
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/advancements/phases/infinity.json ===============

{
  "parent": "absoluteoneblock:phases/enter_mastery",
  "display": {
    "icon": {
      "item": "minecraft:nether_star"
    },
    "title": {
      "translate": "advancements.absoluteoneblock.phases.infinity.title"
    },
    "description": {
      "translate": "advancements.absoluteoneblock.phases.infinity.description"
    },
    "frame": "challenge",
    "show_toast": true,
    "announce_to_chat": true,
    "hidden": false
  },
  "criteria": {
    "requirement": {
      "trigger": "minecraft:impossible"
    }
  },
  "rewards": {
    "experience": 500
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/dimension/oneblock_dimension.json ===============

{
  "type": "absoluteoneblock:oneblock_dimension_type",
  "generator": {
    "type": "absoluteoneblock:one_block",
    "biome_source": {
      "type": "minecraft:multi_noise",
      "preset": "minecraft:overworld"
    },
    "settings": "minecraft:overworld"
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/dimension_type/oneblock_dimension_type.json ===============

{
  "ultrawarm": false,
  "natural": true,
  "coordinate_scale": 1.0,
  "has_skylight": true,
  "has_ceiling": false,
  "ambient_light": 0.0,
  "piglin_safe": true,
  "bed_works": true,
  "respawn_anchor_works": true,
  "has_raids": true,
  "min_y": -64,
  "height": 384,
  "logical_height": 384,
  "monster_spawn_light_level": 0,
  "monster_spawn_block_light_limit": 0,
  "infiniburn": "#minecraft:infiniburn_overworld",
  "effects": "minecraft:overworld",
  "create_portals": true
}


=============== FILE: src/main/resources/data/absoluteoneblock/loot_modifiers/heart_of_the_void_from_chests.json ===============

{
  "type": "absoluteoneblock:add_item",
  "item": "absoluteoneblock:heart_of_the_void",
  "chance": 0.25,
  "chests_only": true,
  "conditions": []
}


=============== FILE: src/main/resources/data/absoluteoneblock/loot_tables/chests/infinity_heart.json ===============

{
  "type": "minecraft:chest",
  "pools": [
    {
      "rolls": 1,
      "entries": [
        {
          "type": "minecraft:item",
          "name": "absoluteoneblock:heart_of_the_void",
          "weight": 1
        }
      ]
    }
  ]
}


=============== FILE: src/main/resources/data/absoluteoneblock/loot_tables/chests/mastery_treasure.json ===============

{
  "type": "minecraft:chest",
  "pools": [
    {
      "rolls": {
        "min": 1,
        "max": 2
      },
      "entries": [
        {
          "type": "minecraft:item",
          "name": "minecraft:netherite_ingot",
          "weight": 1
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:nether_star",
          "weight": 1
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:totem_of_undying",
          "weight": 1
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:enchanted_golden_apple",
          "weight": 1
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:diamond_sword",
          "weight": 5,
          "functions": [
            {
              "function": "minecraft:enchant_with_levels",
              "levels": 30,
              "treasure": true
            }
          ]
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:diamond_pickaxe",
          "weight": 5,
          "functions": [
            {
              "function": "minecraft:enchant_with_levels",
              "levels": 30,
              "treasure": true
            }
          ]
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:diamond_axe",
          "weight": 3,
          "functions": [
            {
              "function": "minecraft:enchant_with_levels",
              "levels": 30,
              "treasure": true
            }
          ]
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:diamond_shovel",
          "weight": 2,
          "functions": [
            {
              "function": "minecraft:enchant_with_levels",
              "levels": 30,
              "treasure": true
            }
          ]
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:diamond_chestplate",
          "weight": 4,
          "functions": [
            {
              "function": "minecraft:enchant_with_levels",
              "levels": 30,
              "treasure": true
            }
          ]
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:diamond_leggings",
          "weight": 4,
          "functions": [
            {
              "function": "minecraft:enchant_with_levels",
              "levels": 30,
              "treasure": true
            }
          ]
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:diamond_helmet",
          "weight": 4,
          "functions": [
            {
              "function": "minecraft:enchant_with_levels",
              "levels": 30,
              "treasure": true
            }
          ]
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:diamond_boots",
          "weight": 4,
          "functions": [
            {
              "function": "minecraft:enchant_with_levels",
              "levels": 30,
              "treasure": true
            }
          ]
        }
      ]
    }
  ]
}


=============== FILE: src/main/resources/data/absoluteoneblock/loot_tables/chests/starting_treasure.json ===============

{
  "type": "minecraft:chest",
  "pools": [
    {
      "rolls": 1,
      "entries": [
        {
          "type": "minecraft:item",
          "name": "minecraft:water_bucket",
          "functions": [
            {
              "function": "minecraft:set_count",
              "count": 1
            }
          ]
        }
      ]
    },
    {
      "rolls": 1,
      "entries": [
        {
          "type": "minecraft:item",
          "name": "minecraft:water_bucket",
          "functions": [
            {
              "function": "minecraft:set_count",
              "count": 1
            }
          ]
        }
      ]
    },
    {
      "rolls": 1,
      "entries": [
        {
          "type": "minecraft:item",
          "name": "minecraft:oak_sapling",
          "functions": [
            {
              "function": "minecraft:set_count",
              "count": 2
            }
          ]
        }
      ]
    },
    {
      "rolls": 1,
      "entries": [
        {
          "type": "minecraft:item",
          "name": "minecraft:lava_bucket"
        }
      ]
    }
  ]
}


=============== FILE: src/main/resources/data/absoluteoneblock/loot_tables/rewards/end_completion.json ===============

{
  "type": "minecraft:gift",
  "pools": [
    {
      "rolls": 1,
      "entries": [
        {
          "type": "minecraft:item",
          "name": "minecraft:elytra"
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:dragon_head"
        }
      ]
    }
  ]
}


=============== FILE: src/main/resources/data/absoluteoneblock/loot_tables/rewards/mastery_gear.json ===============

{
  "type": "minecraft:gift",
  "pools": [
    {
      "rolls": {
        "min": 2,
        "max": 4
      },
      "entries": [
        {
          "type": "minecraft:item",
          "name": "minecraft:netherite_upgrade_smithing_template",
          "weight": 10
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:elytra",
          "weight": 2
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:shulker_shell",
          "weight": 15,
          "functions": [
            {
              "function": "minecraft:set_count",
              "count": 2
            }
          ]
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:beacon",
          "weight": 5
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:experience_bottle",
          "weight": 25,
          "functions": [
            {
              "function": "minecraft:set_count",
              "count": {
                "min": 32,
                "max": 64
              }
            }
          ]
        }
      ]
    }
  ]
}


=============== FILE: src/main/resources/data/absoluteoneblock/loot_tables/rewards/mining_gear.json ===============

{
  "type": "minecraft:gift",
  "pools": [
    {
      "rolls": 1,
      "entries": [
        {
          "type": "minecraft:item",
          "name": "minecraft:iron_helmet",
          "functions": [
            {
              "function": "minecraft:set_count",
              "count": 1
            }
          ]
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:iron_chestplate",
          "functions": [
            {
              "function": "minecraft:set_count",
              "count": 1
            }
          ]
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:iron_leggings",
          "functions": [
            {
              "function": "minecraft:set_count",
              "count": 1
            }
          ]
        },
        {
          "type": "minecraft:item",
          "name": "minecraft:iron_boots",
          "functions": [
            {
              "function": "minecraft:set_count",
              "count": 1
            }
          ]
        }
      ]
    }
  ]
}


=============== FILE: src/main/resources/data/absoluteoneblock/recipes/platform_builder_tool.json ===============

{
  "type": "minecraft:crafting_shaped",
  "pattern": [
    "IDI",
    "ICI",
    " I "
  ],
  "key": {
    "I": {
      "item": "minecraft:iron_ingot"
    },
    "D": {
      "item": "minecraft:diamond"
    },
    "C": {
      "item": "minecraft:chest"
    }
  },
  "result": {
    "item": "absoluteoneblock:platform_builder_tool"
  }
}


=============== FILE: src/main/resources/data/absoluteoneblock/tags/blocks/one_block.json ===============

{
  "replace": false,
  "values": [
    "absoluteoneblock:one_block"
  ]
}


=============== FILE: src/main/resources/data/forge/loot_modifiers/global_loot_modifiers.json ===============

{
  "replace": false,
  "entries": [
    "absoluteoneblock:heart_of_the_void_from_chests"
  ]
}


=============== FILE: src/main/resources/META-INF/mods.toml ===============

modLoader="javafml"
loaderVersion="[47,)"
license="All Rights Reserved"

[[mods]]
modId="absoluteoneblock"
version="1.0.0"
displayName="Absolute One Block"
description='''A custom OneBlock experience.'''

[[dependencies.absoluteoneblock]]
modId="forge"
mandatory=true
versionRange="[47,)"
ordering="NONE"
side="BOTH"

[[dependencies.absoluteoneblock]]
modId="minecraft"
mandatory=true
versionRange="[1.20.1,1.20.2)"
ordering="NONE"
side="BOTH"


